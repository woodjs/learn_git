vim三种模式
普通模式
插入模式
命令模式
可视化模式

光标移动
h  // 移动到上一个字符
j  // 移动到下一行
k  // 移动到上一行
l  // 移动到下一个字符
-  // 移动到上一行行首 
+  // 移动到下一行行首
0  // 移动到本行行首
^  // 到本行第一个不是空白字符的位置
$  // 移动到本行行尾
g_  // 到本行最后一个不是空白字符的位置 
{n}|  // 移动到当前行的第n列，包含空白字符

gg  // 移动到第一行
G  // 移动到最后一行
{n}G  // 移动到指定行
:{n}  // 移动到指定行 
{n}%  // 按百分比近似定位到某行，该行位于整个文件的n%处
ctrl + g  // 显示当前行的位置信息

%  // 匹配括号移动，包括(、{、[
#  // 匹配光标当前所在的单词，移动光标到上一个匹配单词
*  // 匹配光标当前所在的单词，移动光标到下一个匹配单词    

(  // 跳转到当前或前一个句子的开头，句子以句号区分
)  // 跳转到当前或下一个句子的结尾
{  // 跳转到当前或前一个段落的开头，段落以空行区分
}  // 跳转到当前或下一个段落的结尾

w  // 下一个单词开头
W  // 下一个字符串的开头，即以空白字符区分单词
e  // 当前或下一个单词结尾
E  // 当前或下一个字符串结尾，即以空白字符区分单词
b  // 当前或上一个单词开头
B  // 当前或上一个字符串的开头，即以空白字符区分单词
ge  // 上一个单词的结尾
gE  // 上一个字符串的结尾，即以空白字符区分单词

fa  // 到下一个为a的字符处，a可以为其它字符。3fa，在当前行查找第三个出现的a，相当于执行fa，3次
Fa  // 反向查找
t,  // t即to，到本行哪里。t,，到逗号前的第一个字符处，逗号可以变成其它字符
T,  // 反向查找

H  // 将光标移动至屏幕当前页顶部行首
M  // 将光标移动至屏幕当前页中央行首
L  // 将光标移动至屏幕当前页底部行首
{n}H  // 将光标移动至屏幕当前页顶部下的第n行行首
{n}L  // 将光标移动至屏幕当前页底部下的第n行行首

标记光标  // mark
m[a-zA-Z]  // 给当前光标位置做一个标记，标记名只能是一个英文字符
'[a-zA-Z]  // 返回指定光标标记所在行行首
`[a-zA-Z]  // 返回指定光标标记所在行的具体位置
:marks  // 显示全部mark
:delmarks [a-zA-Z]  // 删除指定mark

滚动与翻页
ctrl + b  // 向上翻一页
ctrl + f  //向下翻一页
ctrl + u  // 向上翻半页
ctrl + d  // 向下翻半页
ctrl + y  // 向上翻一行
ctrl + e  // 向下翻一行
zt  // 使光标所在位置移动到屏幕的顶部（所有内容做位移）
zz  // 使光标所在位置移动到屏幕的中央（所有内容做位移）
zb  // 使光标所在位置移动到屏幕的底部（所有内容做位移）

编辑模式
i  // 向光标前方插入信息
I  // 在光标所在行的行首插入信息
a  // 向光标后方插入信息
A  // 在光标所在行的行末插入信息
o  // 在当前行后插入一个新行
O  // 在当前行前插入一个新行
s  // 删除并复制当前字符，并进入插入模式
S  // 删除并复制当前行内容，但不删除行，并进入插入模式，类似cc
r  // 替换当前字符
R  // 进入replace模式，持续替换光标所在字符，直到使用esc退出替换模式
x  // 剪切当前光标，按一次剪切一个
X  // 剪切当前光标的前一个，按一次剪切一个

复制
yy  // 复制光标所在的行

剪切  // 可当作删除使用，c，修改，d，剪切或删除，y，复制
dd  // 剪切光标所在行内容，并删除行
cc  // 剪切光标所在行内容，但不删除行，且直接进入插入模式
cw  // 剪切从光标所在位置后到一个单词结尾的字符，并进入插入模式
dw  // 剪切从光标所在位置后到一个单词结尾的字符，并保持普通模式
D  // 从光标位置开始剪切，一直到行尾
d0  // 从当前位置开始剪切，一直到行首

粘贴
p  // 小写，粘贴到光标后，或下一行，如果不是复制了整行，则是在当前字符后面粘贴
gp  // 同小写p，但粘贴完会把光标移动至粘贴内容之后
P  // 大写，粘贴到光标前，或前一行
gP  // 同大写p，但粘贴完会把光标移动至粘贴内容之后

寄存器  // vim自带一堆寄存器，每个寄存器独立使用，可以在不同寄存器中存储不同数据
:reg  // 查看寄存器情况
"{reg_name}  // 访问特定的寄存器，如："ap，粘贴字母a寄存器中的内容，"1y，将选取的内容复制到数字1寄存器中

系统剪贴板  // vim中系统的剪贴板使用的是选择及拖拽寄存器（"*、"+、"~）
"+y  // 复制文本到系统剪贴板
"+p  // 粘贴系统剪贴板中内容
"+gp  // 粘贴系统剪贴板中内容，并将光标移动粘贴的内容后
shift + insert  // 粘贴系统剪贴板中内容

移动行 
:m-{n+1}  // 将当前行向上移动n行
:m+{n}  // 将当前行向下移动n行
ddp

查找
/{abc}  // N，上一个，n，下一个。/{abc}\c，忽略大小写，\C，不忽略大小写
?{abc}  // 反向查找
q/  // 列出查找历史 
q?  // 列出查找历史

替换
:%s/{old_abc}/{new_abc}/igc  // :s：当前行，:%s：全文，:{n1},{n2}s：指定行，:.,+2s：当前行与接下来两行，i：大小写不敏感，I：大小写敏感，g：全部替换，c：替换前需要确认（y/n/a/q/l/^E/^Y），y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式，l表示替换当前位置并退出，^E与^Y是光标移动快捷键
gn  // 类似查找时的n，可以查找下一个匹配项，但是，gn可以搭配c等操作符使用，可以半自动的重复执行用户的操作，在批量操作时很有用处。如：*（选择文本） -> cgnabc（用户执行替换操作） -> .（重复执行），可以实现每次输入.时，自动将下一个匹配项替换为abc

撤销
u  // 撤销前一个动作
U  // 撤销当前行的一系列动作
ctrl + r  // 取消撤销

文件
:e <path/to/file>  // 打开一个文件
:saveas <path/to/file>  // 文件另存为
:x  // 保存并退出，仅在需要时保存
ZZ  // 保存并退出 
:wq  // 保存并退出 
:bn和:bp  // 可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件，也可以使用:n到下一个文件
:q!  // 退出不保存，!，强制，:qa!，强行退出所有的正在编辑的文件，即使别的文件有更改
:e!  // 不保存修改，强制重新打开当前文件

高级操作
.  // 重复上一次的命令
{n}<command>  // 重复某个命令n次，如：2dd，删除2行，3p，粘贴文本3次
<start position><command><end position>  // 组合基础命令和光标移动，如：0y$，复制一行，ye，从当前位置拷贝到本单词的最后一个字符
<action>{a | i}<object>  // action可以是任何的命令，如y、c、d、v。object可能是：w一个单词，W一个以空格为分隔的单词，s一个句字，p一个段落，b一个block。也可以是一个特别的字符："、 '、 (、 {、 [、<，常用命令如：ciw，剪切单词并进入插入模式，diw，剪切单词，yiw，复制单词，注意：siw无效，等价于s，只是正常的剪切输入
ysiw"  // 需安装surround插件，将单词以"包裹，变成字符串，该功能在写代码时很有用。w可替换为任何<object>。"，可替换为'、 (、 {、 [、<，注意：无yciw”、ydiw"等命令
区域选择  // 操作符，a，区块包含边界，i，区块不包含边界
v  // 字符可视化（visual）模式，文本选择以字符为单位
V  // 行可视化模式，文本选择以行为单位
crtl + v  // 块可视化模式，可以选择一个矩形框内的文本。windows下的vim，需要使用ctrl + q
选好区域后
gU  // 变大写
gu  // 变小写
J  // 把所有的行连接起来（变成一行）
<  // 向左缩进
>  // 向右缩进
=  // 自动缩进，格式化。gg=G，全文代码格式化

宏录制  // 操作序列q、@a、@@
qa  // 开始录制，把后面的操作记录在寄存器a中，再次按q结束录制
@a  // 重新执行被录制的宏
@@  // 重新执行最新录制的宏

插入模式下
ctrl + n  // 自动补齐
ctrl + p  // 自动补齐

分屏
:split  // 水平分屏
:vsplit  // 垂直分屏
ctrl + w [hjkl]  // 切换窗口
ctrl + w _  // 垂直方向，最大化窗口尺寸
ctrl + w |  // 水平方向，最大化窗口尺寸
ctrl + w +  // 增加窗口尺寸
ctrl + w -  // 减小窗口尺寸

:set [config]  // 临时设置vim配置
:help [command]  // 查看某命令的使用说明，缩写，:h

~/.vimrc配置
syntax on  // 开启语法高亮
set nu[mber]  // 显示行号
set nonu[mber]  // 隐藏行号
set cursorline  // 高亮当前行
set ruler  // 显示光标位置信息
set noruler  // 隐藏光标位置信息
set hlsearch  // 高亮匹配
set nohlsearch  // 取消高亮匹配
nohlsearch  // 临时取消高亮（只取消一次查询的高亮）
set incsearch  // 在输入字符串过程中显示匹配点
set nowrapscan  // 找到文尾后停止查找
set wrapscan  // 恢复为到文尾后自动从头开始
set ic/ignorecase  // 忽略大小写
set noic/noignorecase  // 区分大小写