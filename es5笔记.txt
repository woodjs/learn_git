// https://www.cnblogs.com/h2zzhou/p/12929472.html
// https://segmentfault.com/a/1190000016365409
模块加载优先级 // package.json的browser（字符串或对象，当该包只能在web端使用，并且严禁在server端使用时，使用browser字段）、module、main字段
webpack + web + esm 
  browser = browser+mjs > module > browser+cjs > main
webpack + web + commonjs // 事实上，使用webpack构建web应用时，使用import或者require对于加载优先级并没有任何影响
  browser = browser+mjs > module > browser+cjs > main 
webpack + node + esm/commonjs  // 使用webpack构建项目的时候，有一个target选项（和output.libraryTarget不是一个东西），默认为web，即进行web应用构建，当我们需要进行一些同构项目或者其他的node项目构建时，需将target配置为node（使用nodejs的require，而不是使用任意内置模块，如fs或path来加载chunk）
  module > main
node + commonjs // require导入
  只有main字段有效
node + esm // import导入，并且文件后缀名必须是mjs，node --experimental-modules test.mjs
  只有module字段有效  

宏任务  // 宏任务的事件放在宏任务队列中，由事件触发线程维护，同步代码和ui渲染也算作宏任务。事件类型有：I/O、setTimeout、setInterval、setImmediate、requestAnimationFrame
微任务  // 微任务的事件放在微任务队列中，由js引擎线程维护。事件类型有：process.nextTick、MutationObserver、Promise
事件循环运行机制
1、在执行栈中执行一个宏任务
2、执行过程中遇到微任务，将微任务添加到微任务队列中
3、当前宏任务执行完毕，立即执行微任务队列中的所有微任务，执行微任务时动态生成的新的微任务会添加到微任务队列中。微任务队列中的所有微任务，会在该轮事件循环中全部执行，从而清空微任务队列（因此，微任务有插队的功能，可用于在执行下一个宏任务之前同步状态）
4、当前微任务队列中的任务执行完毕，检查渲染，GUI线程接管渲染
5、渲染完毕后，js线程接管，开启下一次事件循环，执行下一个宏任务

闭包可以跨多层作用域捕获变量
方法也可以用作构造函数
函数的prototype默认为一个各自对立的空对象{}，但通过原生bind方法生成的函数的prototype属性为undefined，且该函数的原型链已被冻结无法更改，改了也无效
如果直接替换构造函数的原型对象，即fn.prototype = newObj;之前生成的对象不受影响
如果修改构造函数的原型对象，即fn.prototype.abc = xxx;之前生成的对象也会动态改变
函数调用模式本质上是调用全局对象的方法，即fn()本质上是global.fn()
函数调用模式，this默认指向global对象，使用'use strict';时，this指向undefined
new操作符可以把this绑定到当前生成的对象
如果通过bind方法绑定this指向，无法通过call、apply、bind方法改变this指向，但new操作符可以把this重新绑定到当前新生成的对象
bind方法相当于生成并返回一个新的匿名函数，但这个函数比较特殊，它没有prototype属性，只有__proto__属性（指向Function.prototype），它的原型链已被冻结无法更改，改了也无效
call，apply，bind方法的第一个参数如果是null，undefined、不传，this将会指向global对象（非严格模式下），使用'use strict';时，this指向undefined
call，apply，bind方法的第一个参数如果是原始值，该原始值将被自动转换为对应的包装对象，如fn.call(1)，this将指向Number，并且这个Number的[[PrimitiveValue]]值为1，可以通过this.valueOf()取值
Object.prototype.__proto__为null，这是原型链的终点

Function.prototype.myCall = function(ctx, ...args) {
	ctx = ctx ? Object(ctx) : global;
	const fn = Symbol('fn');
	ctx[fn] = this;
	const result = ctx[fn](...args);
	Reflect.deleteProperty(ctx, fn);  // 等同于delete ctx[fn]
	return result;
}

Function.prototype.myApply = function(ctx, args) {  // 可以检查一下args是不是数组
	ctx = ctx ? Object(ctx) : global;
	const fn = Symbol('fn');
	ctx[fn] = this;
	const result = ctx[fn](...args);
	Reflect.deleteProperty(ctx, fn);  // 等同于delete ctx[fn]
	return result;
}

// 该模拟的原型链部分与实际情况不一致
Function.prototype.myBind = function (ctx, ...args1) {
	let self = this;
	let temp = function() {}; 
	let boundFn = function (...args2) {  
		return self.call(this instanceof temp ? this : ctx, ...args1, ...args2);  // bind后的函数还有可能会被new操作符使用，用来创建对象，此时this得绑定到新对象上，所以不能把ctx传入
	};
	temp.prototype = this.prototype;  // 如果直接boundFn.prototype = this.prototype，当修改boundFn.prototype时，会直接影响this.prototype，所以，得做一层隔离
	boundFn.prototype = new temp();  // 使用new操作符创建新对象作为boundFn的原型
	return boundFn;
}

function myNew(Constructor, ...args) { 
	let newObj = {};
	newObj.__proto__ = Constructor.prototype;
	Constructor.call(newObj, ...args);  // 绑定this，做相关的初始化 
	return newObj;
}

Array
forEach  // 不会遍历纯粹“占着官位吃空饷”的元素
map 
filter 
some
every  
indexOf  
lastIndexOf
reduce  // 如果initialValue缺省，则使用数组的第一个元素作为previousValue，同时currentValue往后排一位，相比有initialValue的少一次迭代。每一轮迭代的返回值作为下一轮的previousValue
reduceRight 

Object
Object.create(prototype[,descriptors]);  // 创建一个对象，并把prototype赋值为第一个参数，同时可以设置多个descriptors
Object.defineProperty(object, property, descriptor); 
Object.defineProperties(object, descriptors);
Object.getOwnPropertyDescriptor(object, property);
Object.getOwnPropertyNames(object);  // 获取所有的属性名，返回一个数组
Object.keys(object);  // 和getOwnPropertyNames方法类似，但是只获取所有的可枚举的属性
Object.preventExtensions(object);  // 用于锁住对象属性，使其不能够拓展，也就是不能增加新的属性，但是属性的值仍然可以更改，也可以把属性删除，Object.isExtensible用于判断对象是否可以被拓展
Object.isExtensible(object);
Object.seal(object);  // 用于把对象密封，也就是让对象既不可以拓展也不可以删除属性（每个属性的configurable被设为false）,但是属性值仍然可以修改，Object.isSealed用于判断对象是否被密封
Object.isSealed(object);
Object.freeze(object);  // 完全冻结对象，在seal的基础上，属性值也不可以修改（每个属性的wirtable被设为false），Object.isFrozen用于判断对象是否被冻结
Object.isFrozen(object);