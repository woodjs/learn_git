/  浮点数除法 7 / 2 => 3.5
//  整数除法 7 // 2 => 3

注释
#
"""text"""

基本数据类型
int（可超过64位）
float
bool
str
str[start:end:step]  // 切片，不包含end
len(str)
str.split(',')
','.join(list)
str.startswith('a')
str.endswith('z')
str.find('abc')
str.rfind('abc')  // 最后一个'abc'的位置
str.count('a')
str.isalnum()  // 所有字符都是字母或数字，True | False
str.strip('.')  // 去除字符串尾部的'.'
str.capitalize()  // 字符串首字母大写
str.title()  // 所有单词首字母大写
str.upper()  // 所有字母大写
str.lower()
str.swapcase()  // 所有字母大小写转换
str.center(30)  // 居中字符串
str.ljust(30)  // 字符串左对齐
str.rjust(30)  // 字符串右对齐
str.replace('a', 'b', 100)  // 100，替换多少处

复杂数据类型
列表  // 允许元素重复
list  // []
list() | []  // 创建列表
list[start:end:step]  // 切片，不包含end
list.append(elem)
list.extend(list1)  // 合并列表，也可以使用 +=
list.insert(index, elem)  // index越界时，如果偏移量超过了尾部，则插入到列表最后
del list[index]  // 删除指定位置的元素，无del方法
list.remove(elem)  // 删除具有指定值的元素
list.pop(0)  // 获取并删除指定位置的元素
list.index(elem)  // 查询具有特定值的元素位置
elem in list  // 判断值是否存在，True | False
list.count(elem)  记录特定值出现的次数
','.join(list)
list.sort(reverse=True)  // 改变原始列表，默认升序
sorted(list)  // 不改变原始列表，创建一个新的列表
len(list)
list.copy()  // 复制

元组（不可变的列表）
tuple  // ()，元组占用的空间比列表小，函数的参数以元组的形式传递
tuple() | ()

字典  // 在其他语言中，字典可能会被称作关系型数组、哈希表或哈希图
dictionary  // {}，字典中元素的顺序是无关紧要的，实际存储顺序可能取决于你添加元素的顺序，字典的键必须为不可变对象，因此，元组可以作为字典的键
dict(list) | {}  // 将包含双值子元素的序列（或元组等）转换成字典，如：[ ['a', 'b'], ['c', 'd'], ['e', 'f'] ]
dict.update(otherDict)  // 将一个字典的键值对复制到另一个字典中
del dict[key]
dict.clear()
key in dict  // True | False
dict.get(key, value)  // 可避免越界异常，value，可选值，当key不存在时，返回该可选值，无可选值时，返回None(null类型)
dict.keys()  // 获取所有键，for in默认
dict.values()
dict.items()
dict.copy()

集合  // 不允许元素重复，且不关注元素顺序，集合就像舍弃了值，仅剩下键的字典一样，集合中的元素不允许是列表、字典等unhashable类型
set() | {1, 2, 3}  // 只有{}时，会创建空字典
&  // 交集运算符，a & b == a.intersection(b)
|  // 并集运算符，a | b == a.union(b)
-  // 差集运算符，a - b == a.difference(b)
^  // 异或集运算符，a ^ b == a.symmetric_difference(b)
<=  // 判断一个集合是否是另一个集合的子集，a <= b == a.issubset(b)
<  // 真子集
>=  // 超集，a >= b == a.issuperset(b)
>  // 真超集

None

条件运算符
is_true = True if a == 1 else False

条件语句
if elif else

循环语句
while else  // else子句只是在循环完成后执行，也就是说break语句会跳过else块

迭代
for in else  // else子句只是在循环完成后执行，也就是说break语句会跳过else块

zip()  // 并行迭代，返回的是一个可迭代的对象
range(start, end, step)  // 返回在特定区间的自然数序列，返回的是一个可迭代的对象

推导式  // 元组是没有推导式
[expression for item in iterable if condition]  // 列表推导式
{key_expression : value_expression for expression in iterable}  // 字典推导式
{expression for item in iterable if condition}  // 集合推导式
(number for number in range(1, 6))  // 生成器推导式，圆括号之间的是生成器推导式(元组没有推导式)，它返回的是一个生成器对象，一个生成器只能运行一次，但是生成器仅在运行中产生值，不会被存下来，所以不能重新使用或者备份一个生成器

in
not
with
is

函数
def func_name():  // 位置参数，关键字参数，默认参数，默认参数值在函数被定义时已经计算出来，而不是在程序运行时
*  // 将一组可变数量的位置参数收集成参数值的元组
**  // 收集关键字参数，将参数收集到一个字典中
在函数体开始的部分附上函数定义说明的文档，这就是函数的文档字符串，help(func)，参数列表和文档字符串，help(func.__doc__)，文档字符串

lambda函数是用一个语句表达的匿名函数。如：edit_story(stairs, lambda word: word.capitalize() + '!')

生成器  // 用来创建python序列的一个对象，内部使用yield关键字，返回的是一个生成器对象

装饰器  // 实质上是一个函数。它把一个函数作为输入并且返回另外一个函数，@decorator_name，靠近函数定义(def上面)的装饰器最先执行，然后依次向上执行

global关键字  // 读取全局变量而不是函数中的局部变量
locals()  // 返回一个局部命名空间内容的字典
globals()  // 返回一个全局命名空间内容的字典

try:
except IndexError as err:  // 一个IndexError异常赋给变量err

自定义异常
class UppercaseException(Exception):  // 即使没有定义UppercaseException的行为(注意，使用了pass)，也可以通过继承其父类Exception在抛出异常时输出错误提示
  pass  // 对异常不作任何处理
raise UppercaseException('error info')  // 抛出异常

模块  // 不管模块在程序中被引用多少次，始终只有一个实例被加载，和对象不同
from package_name | module_name import python_file_name | func_name  // 不带.py后缀，模块文件夹层级通过.表示，import可不放置在文件头部，甚至可以放置在函数内部
as关键字

类
class A: 
  def __init__(self):  // 对象的初始化方法，__init__并不是必需的，只有当需要区分由该类创建的不同对象时，才需要指定__init__方法，self，必须是第一个参数，self不是关键字，可自定义为其它标志符
    pass  // pass表示这个类是一个空类
类继承
class B(A):  // A，父类

super()  // 可通过它，调用父类的方法

属性  // 通常用于getter，setter
abc = property(get_abc, set_abc)  // 写在类中，get_abc，set_abc必须先定义，否则找不到方法
或
@property  // 修饰符
def abc(self):
  print('inside the getter')
@abc.setter  // 不定义setter方法就是一个只读属性
def abc(self, input_name):
  print('inside the setter')

私有特性
__{name}  // 名称以__为前缀的类的特性，python通过名称重整让特性私有

类方法
class A:
  @classmethod  // @classmethod指定的方法都是类方法，不需要实例化就可以调用
  def test(cls):  // 类方法的第一个参数是类本身，这个参数常被写作cls
    pass

静态方法  // 可以被类或实例调用
class A:
  @staticmethod
  def test():  // 它既不需要self参数也不需要class参数，通过类名直接调用
    pass

特殊方法  // 可自定义重写，改变python原始操作
__eq__(self, other) self == other
__ne__(self, other) self != other
__lt__(self, other) self < other
__gt__(self, other) self > other
__le__(self, other) self <= other
__ge__(self, other) self >= other
__add__(self, other) self + other
__sub__(self, other) self - other
__mul__(self, other) self * other
__floordiv__(self, other) self // other
__truediv__(self, other) self / other
__mod__(self, other) self % other
__pow__(self, other) self ** other
__str__(self) str(self)  // 定义如何打印对象信息
__repr__(self) repr(self)  // 交互式解释器则用__repr__()方法输出变量
__len__(self) len(self)

组合  // 多继承
tail = Tail('long')
bill = Bill('wide orange')
duck = Duck(bill, tail)

命名元组  // 命名元组并不是python自动支持的类型，命名元组是不可变的，与使用对象相比，使用命名元组在时间和空间上效率更高
from collections import namedtuple
命名元组是元组的子类，你既可以通过名称（使用.name）来访问其中的值，也可以通过位置进行访问（使用[offset]）

虚拟环境  // 隔离安装包
python -m venv your_env_name  // 如果使用的是较早版本的python或者系统没有正确的设置，不能使用模块venv，可安装virtualenv，pip install --user virtualenv，创建虚拟环境，virtualenv your_env_name
source your_env_name/bin/activate  // 激活虚拟环境
deactivate  // 停止使用虚拟环境

__name__  // __name__ == '__main__'
__package__
__file__
__init__.py
__main__.py
setup.py

python abc/run.py  // 直接运行脚本
python -m abc.run  // 不能加.py后缀，.表示目录层级。该模式，相当于import，当做模块方式运行
sys.path  // 一个列表，保存着模块的搜索路径
sys.modules  // 一个字典，所有加载到内存中的模块都存放在该字典中
runpy模块  // 定位并执行该模块。主要用途在于实现命令行-m执行python模块的效果
pkgutil模块  // 获取包里面的所有模块列表。pkgutil.get_data()可读取包内任何文件内容

项目依赖包
pip freeze > requirements.txt
pip install -r requirements.txt

将python项目打包成可安装文件
pyinstaller  // pip install pyinstaller，用于生成exe文件
NSIS  // 第三方软件，根据exe文件，生成引导用户安装程序