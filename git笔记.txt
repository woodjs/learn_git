集中式版本控制系统
CVS SVN（必须联网才能干活）
分布式版本控制系统
git

windows下要使用很多Linux和Unix工具时，需要Cygwin这样的模拟环境。打包好的git，msysgit.exe

ssh-keygen -t rsa -C "1761869346@qq.com"  // 创建ssh key
提示错误:ssh: connect to host github.com port 22: Connection timed out
原因:The reason could be the firewall modification as you are under a network.(In which case they may deliberately block some ports)
解决方案:
ssh -T git@github.com  // 检测ssh连接是否超时
git config --local -e  // 文本编辑器打开git本地配置文件
url = git@github.com:username/repo.git => url = https://github.com/username/repo.git  // 更改连接方式为https

HEAD当前版本（HEAD可全部小写）
HEAD^ 上一个版本
HEAD^^ 上上个版本
HEAD^^...
HEAD~199  上199个版本

git init
git add test_git.txt
git add -A  // stages all
git add .  // stages new and modified, without deleted
git add -u  // stages modified and deleted, without new
git status
git commit -m "这是git的第一行"  // 描述文字，最好用英文，否则，会报出警告。

git remote  // 查看远程库名称
git remote -v  // 显示更详细的信息
git remote add origin git@github.com:woodjs/learn_git.git  // origin是默认远程仓库的名字，可更改

git clone git@github.com:woodjs/learn_git_clone.git
git clone -b branchName git@github.com:woodjs/learn_git_clone.git  // 克隆指定分支
git pull  // 从远程拉最新提交
git pull origin master --allow-unrelated-histories  // 解决通过pull合并两个不同的项目时，出现fatal: refusing to merge unrelated histories的问题
git push origin master
git push -u origin master  // 第一次推送，加-u，推送所有内容，还可把本地的master分支和远程的master分支关联起来，以后推送或拉取时可简化命令
git fetch origin master  // 只获取数据不merge

git checkout -- <file>  // 丢弃工作区中某文件的修改，没有--，就变成一个切换分支的命令
git checkout .  // 丢弃工作区中所有修改
git checkout HEAD <file>  // 丢弃工作区和暂存区中某文件的修改
git checkout HEAD .  // 丢弃工作区和暂存区中所有修改

git reset HEAD <file>  // 丢弃暂存区中该文件的修改，工作区不受影响
git reset {commit_id}  // 暂存区的目录树会被重写，被master分支指向的目录树所替换，但是工作区不受影响
git reset --soft 版本号（7位）  // 将HEAD移动到指定的提交（或者相对于HEAD的位置索引），但不会丢弃这些提交带来的改动
git reset --hard HEAD^  // --hard，暂存区，工作区全部替换，再次提交，可能会产生冲突
git reset --hard 版本号（7位）  // 到指定版本号，可前进和后退，再次提交，可能会产生冲突

git revert 版本号（7位）  // 复原某个提交后，会创建一个新的提交，包含了恢复后的改动

git cherry-pick 版本号（7位） // 当活动分支需要某个分支的某个提交包含的改动时，我们可以用cherry-pick命令。通过cherry-pick某个提交，在当前活动分支上会创建一个新提交，包含了另一个分支某一次提交带来的改动

git branch  // 查看本地所有分支
git branch -a  // 查看远程所有分支
git branch -d dev  // 删除dev分支
git branch -D feature  // 强行丢弃一个没有被合并过的分支
git checkout -b dev  // 创建并切换分支，相当于git branch dev，git checkout dev
git checkout -b dev origin/dev  // 从远程库克隆时，默认只能看到master分支，要想看到其它分支，可使用该命令
git checkout --track origin/yourbranch  // 切换到远程分支
git branch --set-upstream dev origin/dev  // 指定本地分支和远程分支的连接

git merge dev  // 合并指定分支到当前分支，Fast forward模式（快进模式），在这种模式下，删除分支后，会丢掉分支信息
git merge --no-ff -m "merge with no-ff" dev  // 强制禁用Fast forward模式，--no-ff参数就可以用普通模式合并，合并后的历史有分支记录，可以看出做过合并，而Fast forward合并就看不出来曾经做过合并

git rebase master  // 复制当前分支的提交，然后把这些提交放到指定分支的head之上，但不合并分支。当前分支的提交复制时会产生新的hash，因此rebase会丢弃当前分支的合并与提交信息
与merge相比，最大的区别是git不会去找出哪些文件需要保留，哪些文件不需要保留。我们要rebase的分支总是包含了我们想要保留的最新改动。这种方式不会有合并冲突，并且保持了良好的线性git历史记录
当在特性分支上开发时，master分支有更新的时候，rebase很有用。通过rebase，当前分支就能拿到所有更新，避免了将来可能的合并冲突

交互式rebase  // 修改当前分支的提交，会产生新的hash，如：git reabse -i HEAD^3
reword  // 修改提交说明
edit  // 修改提交内容（amend）
squash  // 将该提交合并到前一个提交
fixup  // 将该提交合并到前一个提交，不保留提交的日志消息
exec  // 在想要 rebase 的每一个提交上执行命令
drop  // 删除提交

git tag v1.0
git tag  // 查看所有标签，按字母排序
git tag -n  // 查看所有标签及标签描述
git tag v0.9 e6bb687
git show v0.9  // 查看标签信息
git tag -a v0.8 -m "version 0.8 released" e6bb687  // -a指定标签名，-m添加标签描述
git tag -s v0.8 -m "version 0.8 released" e6bb687  // -s用私钥签名一个标签，签名采用PGP签名，因此，必须先安装gpg（Gnupg）。
git tag -d v0.9
git push origin v1.0  // 向远程推送标签
git push origin --tags  // 向远程一次性推送所有未推送的标签
git push origin :refs/tags/v1.0  // 从远程库删除标签，必须先本地删除
git clone --branch v1.0 https://github.com/username/repo.git  // 获取某tag版本号下的资源

git stash  // 储存工作现场
git stash list
git stash apply  // 将最新储存的工作现场合并到当前commit，不删除stash
git stash apply stash@{0}  // 将指定的工作现场合并到当前commit
git stash drop  // 删除stash
git stash pop  // 将最新储存的工作现场合并到当前commit，并删除stash
git stash clear  // 清空

git log --graph --pretty=oneline --abbrev-commit  // 查看分支合并记录，以及历史提交id，--graph，可以看到分支合并图
git reflog  // 查看历史命令记录，包括拉取和提交

git diff test_git.txt  // 查看某文件的修改内容
git diff HEAD -- test_git.txt  // --后面要有空格，查看工作区和版本库里面最新版本的区别

git rm <file>
git rm --cached <file>  // 会直接从暂存区删除文件，工作区则不做出改变
git rm -r --cached   // 删除暂存区的缓存

git config --global user.name "bugong"
git config --global user.email "1761869346@qq.com"
git config --global color.ui true  // 让git显示颜色
git config --global alias.st status  // alias 别名

git服务器（linux系统）
1、安装git
sudo apt-get install git
2、创建git用户
sudo adduser git
3、创建证书登陆
搜集所有用户的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里
4、初始化git仓库
sudo git init --bare sample.git
sudo chown -R git:git sample.git  // 将owner改为git
5、禁用shell登录
编辑/etc/passwd文件完成。可正常通过ssh使用git，但无法登录shell
6、克隆远程仓库
git clone git@server:/srv/sample.git

gitosis  // 管理公钥
gitolite  // 权限控制
