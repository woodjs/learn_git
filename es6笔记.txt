let和const命令
es6中声明变量的方法
var function let const class import
不存在变量名提升
暂时性死区
不允许重复声明
let、const、class、import声明的变量不是全局对象的属性

变量的解构赋值
模式匹配，模式和变量
= 指定默认值
[x, y = 'b'] = ['a', undefined] //x='a', y='b'
var { message: msg = "Something went wrong" } = {};  msg //"Something went wrong"
如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。
变量声明语句中，模式不能带有圆括号。
var [(a)] = [1]; //error
不能将整个模式，或嵌套模式中的一层，放在圆括号之中。
({ p: a }) = { p: 42 }; //error
赋值语句的非模式部分，可以使用圆括号。
({ p: (d) } = {}); //ok
如果要将一个已经声明的变量用于解构赋值，必须非常小心。JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。
var x;
{x} = {x: 1}; //error
({x} = {x: 1}); //ok
用途：
交换变量的值
从函数返回多个值
函数参数的定义
提取json数据
函数参数默认值
遍历map
引入其它模块指定方法

字符串的扩展
unicode表示
es5 \u20BB7 => \u20BB + 7 => 不可打印字符空格和7
es6 \u{20BB7}
js表示一个字符有6种方法：
'z'
'\z' === 'z'  // true
'\u007A' === 'z' // true
'\u{7A}' === 'z' // true
'\x7A' === 'z' // true
'\172' === 'z' // true  十进制表示法，码点
es5 charAt(); charCodeAt(); String.fromCharCode();
es6 at(); codePointAt(); String.fromCodePoint();
codePointAt(); //返回十进制的码点，可通过toString(16)转换成十六进制
字符串实现了Iterator接口，for...of可以正确的识别32位utf-16字符
normalize(); 将字符的不同表示方法统一为一样的形式，即unicode正规化，目前只适用于欧洲文字，解决法语的重音符号之类的问题，且不能识别三个或三个以上字符的合成
参数：
NFC 标准等价合成
NFD 标准等价分解
NFKC 兼容等价合成
NFKD 兼容等价分解
includes(str, index);
startsWidth(str, index);
endsWith(str, index); //此时index表示前index个字符
repeat(num);
es7 字符串补全长度
padStart(len, str); //len，总字符串长度
padEnd(len, str); //len，总字符串长度
模板字符串 ``
变量 ${} 大括号内部，可以放任意js表达式，包括调用函数，如果是一个字符串，直接原样输出
es6
String.raw`str`; 或 String.raw({raw: arr}, str1, str2, ...); 返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串。如果原字符串的斜杠已经转义，那么String.raw不会做任何处理。
标签模板
模板字符串，可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。
var a = 5;
var b = 10;
function tag(stringArr, value1, value2) {//...}
tag `Hello ${ a + b } world ${ a * b }`; 等同于 tag(['Hello ', ' world ', ''], 15, 50);
第一个参数都一个raw属性，也指向该字符串数组，区别是raw属性里面的字符串斜杠都被转义了,strings.raw数组会将\n视为\和n两个字符，而不是换行符。
应用：
过滤html字符串，防止用户输入恶意内容
多语言转换（国际化处理）
在js语言之中嵌入其他语言

正则的扩展
es6,regexp构造函数可直接传入正则，第二个参数指定的修饰符会替换之前定义的修饰符
var a = new RegExp(/abc/ig, 'i').flags; //'i'
flags属性
u修饰符 unicode模式，用来正确处理大于\uFFFF的unicode字符
y修饰符 粘连修饰符，与g修饰类似，y修饰符号隐含了头部匹配的标志ˆ，y修饰符的设计本意，就是让头部匹配的标志ˆ在全局匹配中都有效
sticky属性 表示是否设置了y修饰符，返回ture或false
RegExp.escape() 将普通字符串转义，使之正则化。未列入es7

数值的扩展
二进制 0b
八进制 0o  es5 严格模式不能使用0
转换成十进制 Number('0b11111');
Number.isFinite(); //只对数值有效
Number.isNaN(); //只对数值有效
与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断
Number.parseInt();
Number.parseFloat();
Number.isInteger();  //只对数值有效，注意Number.isInteger(3.0);返回true
Number.EPSILON es6新增的一个极小常量 ，用作定义一个可接受的误差范围
Number.isSafeInteger(); //js可正确表示的整数范围，-2^53 ~ 2^53 （不包含两个端点）
Number.MAX_SAFE_INTEGER
Number.MIN_SAFE_INTEGER
Math.trunc(); //去除小数部分
Math.sign(); //判断一个数是正数、负数或是0，分别返回 ＋1，－1， 0
Math.cbrt(); //计算一个数的立方根
Math.clz32(); //返回一个32位无符号整数有多少个前导零
Math.imul(a, b); //返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数
Math.fround(); //返回一个数的单精度浮点数形式
Math.hypot(a, b, ...); //返回所有参数的平方和的平方根
Math.expm1(x); //返回ex/*x为下标*/ - 1，即Math.exp(x) - 1
Math.log1p(x); //返回1 + x的自然对数，即Math.log(1 + x)
Math.log10(x); //返回以10为底的x的对数
Math.log2(x); //返回以2为底的x的对数
Math.sinh(x); //返回x的双曲正弦
Math.cosh(x); //返回x的双曲余弦
Math.tanh(x); //返回x的双曲正切
Math.asinh(x); //返回x的反双曲正弦
Math.acosh(x); //返回x的反双曲余弦
Math.atanh(x); //返回x的反双曲正切
es7指数运算符 **
a ** 3  =>  a * a* a

数组的扩展
Array.from(); //将类似数组的对象（array-like object）和可遍历（iterable）的对象（包括es6新增的数据结构Set和Map）准换为数组，可正确处理4字节unicode字符
Array.from可以有第二个参数，类似map方法，Array.from([1, 2, 3], (x) => x * x);
扩展运算符 ... 可以将某些数据结构转为数组，背后调用的是遍历器接口（Symbol.iterator）
Array.of(); //用于将一组值，转换为数组，弥补，数组构造函数Array()因为参数个数的不同，而导致的行为差异
copyWithin(target, start = 0, end = this.length); //target，从该位置开始替换数据，start，从该位置开始读取数据
[1, 2, 3, 4, 5].copyWithin(0, 3, 4); //[4, 2, 3, 4, 5]
find(function (item, index, array) {}); //返回第一个符合条件的成员，可以发现NaN，弥补IndexOf方法的不足
findIndex(function (item, index, array) {});
fill(value, startIndex, endIndex); //不包括endIndex
entries();
keys();
values();
es7 includes(); //可以正确处理NaN(NaN === NaN)，弥补IndexOf方法的不足
es6明确将空位转为undefined
es7 数组推导，数组推导需要注意的地方是，新数组会立即在内存中生成。如果原数组是一个很大的数组，将会非常耗费内存
var a1 = [1, 2, 3, 4];
var a2 = [for (i of a1) i * 2];
a2 //[2, 4, 6, 8]

函数的扩展
函数参数的默认值
length属性，返回没有指定默认值的参数个数，不包括指定了默认值的参数
rest参数（剩余参数），用来替代arguments，函数的length属性，不包括rest参数
参数的扩展运算符...，将一个数组转为用逗号分隔的参数序列，不再需要apply方法，来将数组转为函数的参数，可正确识别32位unicode字符，可成功展开部署了iterator接口的对象
name属性，返回该函数的函数名。new Function(...)返回的函数实例，name属性的值为'anonymous'，bind方法返回的函数，name属性值会加上'bound '前缀
箭头函数
如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回
由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号
箭头函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象
不可以使用arguments对象，该对象在箭头函数体内不存在
箭头函数不能用作Generator函数
this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。
箭头函数内部没有arguments、super、new.target三个变量
由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向
es7 函数绑定运算符::，双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面
foo::bar; 等同于 bar.bind(foo);
如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上、
尾调用，指某个函数的最后一步是调用另一个函数，不包含任何多余的操作
尾递归，尾调用自身
尾递归优化
一旦启用尾调用优化，func.arguments和func.caller这两个函数内部对象就失去意义了，因为外层的帧会被整个替换掉，这两个对象包含的信息就会被移除。严格模式下，这两个对象也是不可用的
纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现
es7提案，允许函数的最后一个参数有尾逗号，利于git等版本控制

对象的扩展
属性的简洁表示法，es6允许直接写入变量和函数，作为对象的属性和方法
setter 属性的赋值器,set
getter 属性的取值器,get
Generator *
属性名表达式，[]
注意，属性名表达式与简洁表示法，不能同时使用，会报错
方法的name属性，如果使用了取值函数，则会在方法名前加上‘get ’。如果是存值函数，方法名的前面会加上'set '。如果是一个Symbol值，那么name属性返回的是这个Symbol值的描述
Object.is(); 比较两个值是否严格相等，+0不等于-0，NaN等于自身
Object.assign(); 用来将源对象（source）的所有可枚举属性，复制到目标对象（target）,只拷贝自身属性，不可枚举的属性（enumerable为false）和继承的属性不会被拷贝，对于嵌套的对象，Object.assign的处理方法是替换，而不是添加
属性的可枚举性
对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为
let obj = { foo: 123 }; Object.getOwnPropertyDescriptor(obj, 'foo'); => { value: 123, writable: true, enumerable: true, configurable: true }
1. value：值，默认是undefined
2. writable：是否是只读property，默认是false
3. enumerable：是否可以被枚举(for in)，默认false
4. configurable：是否可以被删除，默认false
5. get：返回property的值的方法，默认是undefined
6. set：为property设置值的方法，默认是undefined
for...in 循环, 只遍历对象自身的和继承的可枚举的属性
Object.keys(); //返回对象自身的所有可枚举的属性的键名
Object.values();
Object.entries();
JSON.stringify(); //只串行化对象自身的可枚举的属性
Object.assign(); //只拷贝源对象自身的可枚举的属性
es6规定，所有Class的原型的方法都是不可枚举的
属性的遍历，7种方法
for...in //for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）
for...of //不含Symbol属性，不遍历原型对象
Object.keys(obj); //Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）
Object.getOwnPropertyNames(obj); //Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）
Object.getOwnPropertySymbols(obj); //Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性
Reflect.ownKeys(obj); //Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举
Reflect.enumerate(obj); //Reflect.enumerate返回一个Iterator对象，遍历对象自身的和继承的所有可枚举属性（不含Symbol属性），与for...in循环相同
__proto__属性，只有浏览器必须部署这个属性，其他运行环境不一定部署
Object.setPrototypeOf();
Object.getPrototypeOf();
Object.create();
Object.defineProperty(obj, mySymbol, { value: 'Hello!'});
Object.isExtensible(); //是否可向对象添加新属性
es7提案，对象的扩展运算符，...

Symbol
js的数据类型
undefined，null，boolean，string，number，object
Symbol函数前不能使用new命令，因为它不是对象，它是一种类似于数组的数据类型
Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述
Symbol值不能与其他类型的值进行运算，Symbol值可以显式转为字符串，也可以转为布尔值，但是不能转为数值
Symbol值作为对象属性名时，不能用点运算符
Symbol.for('str'); //重新使用同一个Symbol值，会被登记在全局环境中供搜索，Symbol.for()不会每次调用就返回一个新的Symbol类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值
Symbol.keyFor(); //返回一个已登记(使用Symbol.for()而不是使用Symbol())的Symbol类型值的描述
内置的Symbol值
es6提供了11个内置的Symbol值，指向语言内部使用的方法
Symbol.hasInstance //instanceof运算符
Symbol.isConcatSpreadable //属性等于一个布尔值，表示该对象使用Array.prototype.concat()时，是否可以展开
Symbol.species //指向一个方法。该对象作为构造函数创造实例时，会调用这个方法
Symbol.match //当执行str.match(myObject)时，如果该属性存在，会调用它
Symbol.replace //该对象被String.prototype.replace方法调用时，会返回该方法的返回值
Symbol.search //当该对象被String.prototype.search方法调用时，会返回该方法的返回值
Symbol.split //当该对象被String.prototype.split方法调用时，会返回该方法的返回值
Symbol.iterator //指向该对象的默认遍历器方法，即该对象进行for...of循环时，会调用这个方法，返回该对象的默认遍历器
Symbol.toPrimitive //该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值
Symbol.toStringTag //在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型
Symbol.unscopables //该对象指定了使用with关键字时，哪些属性会被with环境排除

Proxy和Reflect
元编程，即对编程语言进行编程
Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改
var proxy = new Proxy(target, handler); //handler是一个对象
要使得Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作
Proxy实例也可以作为其他对象的原型对象
Proxy支持的拦截操作，在handler对象中定义
get(target, propKey, receiver); //用于拦截某个属性的读取操作，receiver可选，用于绑定this
set(target, propKey, value, receiver); //用来拦截某个属性的赋值操作
apply(target, object, args); //拦截函数的调用、call和apply等操作
has(target, propKey); //隐藏某些属性，不被in操作符发现，用来拦截in操作符，对for...in循环无效
enumerate(target); //用来拦截for...in循环
construct(target, args, proxy); //用于拦截new命令，如果construct方法返回的不是对象，会抛出错误
deleteProperty(target, propKey); //用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除
defineProperty(target, propKey, propDesc); //拦截Object.defineProperty操作
getOwnPropertyDescriptor(target, propKey); //拦截Object.getOwnPropertyDescriptor，返回一个属性描述对象或者undefined
getPrototypeOf(target); //拦截Object.getPrototypeOf()运算符
setPrototypeOf(target, proto); //拦截Object.setPrototypeOf方法
ownKeys(target); //拦截Object.keys()操作
isExtensible(target); //拦截Object.isExtensible操作
preventExtensions(target); //Object.preventExtensions();该方法必须返回一个布尔值，该方法有一个限制，只有当Object.isExtensible(proxy)为false时，proxy.preventExtensions才能返回true
Proxy.revocable(); //返回一个可取消的Proxy实例
let target = {};
let handler = {};
let {proxy, revoke} = Proxy.revocable(target, handler);
proxy.foo = 123;
proxy.foo //123
revoke();
proxy.foo //TypeError: Revoked
Reflect对象，将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上，修改某些Object方法的返回结果（发生错误时，返回false），让其变得更合理
Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法，因此，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为
Reflect对象的方法
Reflect.apply(fun,thisArg,args); //等同于Function.prototype.apply.call(fun,thisArg,args);
Reflect.construct(target,args);
Reflect.get(target,name,receiver);
Reflect.set(target,name,value,receiver);
Reflect.defineProperty(target,name,desc);
Reflect.deleteProperty(target,name);
Reflect.has(target,name);
Reflect.ownKeys(target);
Reflect.isExtensible(target);
Reflect.preventExtensions(target);
Reflect.getOwnPropertyDescriptor(target, name);
Reflect.getPrototypeOf(target);
Reflect.setPrototypeOf(target, prototype);

二进制数组
二进制数组由三类对象组成，ArrayBuffer对象，TypedArray视图，DataView视图
通过“视图”进行操作二进制数据，“视图”部署了数组接口，视图的作用是以指定格式解读二进制数据
ArrayBuffer对象代表原始的二进制数据，TypedArray视图用来读写简单类型的二进制数据，DataView视图用来读写复杂类型的二进制数据
二进制数组并不是真正的数组，而是类似数组的对象
ArrayBuffer.prototype.byteLength //返回所分配的内存区域的字节长度
ArrayBuffer.prototype.slice(startByteIndex, endByteIndex); //不包括endByteIndex
ArrayBuffer.isView(); //表示参数是否为ArrayBuffer的视图实例
TypedArray视图，9种视图类型，每一种视图都是一种构造函数
Int8Array：8位有符号整数，长度1个字节
Uint8Array：8位无符号整数，长度1个字节
Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同
Int16Array：16位有符号整数，长度2个字节
Uint16Array：16位无符号整数，长度2个字节
Int32Array：32位有符号整数，长度4个字节
Uint32Array：32位无符号整数，长度4个字节
Float32Array：32位浮点数，长度4个字节
Float64Array：64位浮点数，长度8个字节
TypedArray数组的成员是连续的，不会有空位
普通数组的操作方法和属性，对TypedArray数组完全适用，注意，TypedArray数组没有concat方法
var a = new {TypedArray}(buffer, byteOffset=0, length?);
构造函数的参数也可以是一个普通数组，然后直接生成TypedArray实例。
TypedArray数组也可以转换回普通数组。
var normalArray = Array.prototype.slice.call(typedArray);
字节序指的是数值在内存中的表示方式，即大端还是小端格式存储的
TypedArray数组的最大优点就是可以直接操作内存，不需要数据类型转换，所以速度快得多
BYTES_PER_ELEMENT属性，表示这种数据类型占据的字节数
ArrayBuffer与字符串的互相转换
溢出
正向溢出（overflow），输入值大于当前数据类型的最大值，最后得到的值就等于当前数据类型的最小值加上余值，再减去1
负向溢出（underflow），等于当前数据类型的最大值减去余值，再加上1
Uint8ClampedArray视图的溢出，负向溢出都等于0，正向溢出都等于255
TypedArray.prototype.buffer //返回整段内存区域对应的ArrayBuffer对象
TypedArray.prototype.byteLength //返回TypedArray数组占据的内存长度，单位为字节
TypedArray.prototype.byteOffset //返回TypedArray数组从底层ArrayBuffer对象的哪个字节开始
TypedArray.prototype.length //表示TypedArray数组含有多少个成员
TypedArray.prototype.set(); //用于复制数组，将一段内容完全复制到另一段内存，它是整段内存的复制，比一个个拷贝成员的那种复制快得多
TypedArray.prototype.subarray(); //对于TypedArray数组的一部分，再建立一个新的视图
TypedArray.prototype.slice(); //返回一个指定位置的新的TypedArray实例
TypedArray.of(); //TypedArray数组的所有构造函数，都有一个静态方法of，用于将参数转为一个TypedArray实例
TypedArray.from(); //接受一个可遍历的数据结构（比如数组）作为参数，返回一个基于这个结构的TypedArray实例，from会将第一个参数指定的TypedArray数组，拷贝到另一段内存之中
复合视图
TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了
DataView视图
DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的
var buffer = new ArrayBuffer(24);
var dv = new DataView(buffer);
DataView.prototype.buffer //返回对应的ArrayBuffer对象
DataView.prototype.byteLength //返回占据的内存字节长度
DataView.prototype.byteOffset //返回当前视图从对应的ArrayBuffer对象
DataView实例读取内存
getInt8(); //读取1个字节，返回一个8位整数
getUint8(); //读取1个字节，返回一个无符号的8位整数
getInt16(); //读取2个字节，返回一个16位整数
getUint16(); //读取2个字节，返回一个无符号的16位整数
getInt32(); //读取4个字节，返回一个32位整数
getUint32(); //读取4个字节，返回一个无符号的32位整数
getFloat32(); //读取4个字节，返回一个32位浮点数
getFloat64(); //读取8个字节，返回一个64位浮点数
默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true
DataView实例写入内存
setInt8(); //写入1个字节的8位整数
setUint8(); //写入1个字节的8位无符号整数
setInt16(); //写入2个字节的16位整数
setUint16(); //写入2个字节的16位无符号整数
setInt32(); //写入4个字节的32位整数
setUint32(); //写入4个字节的32位无符号整数
setFloat32(); //写入4个字节的32位浮点数
setFloat64(); //写入8个字节的64位浮点数
二进制数组的应用
ajax //xhr.responseType = 'arraybuffer';
canvas //它的视图类型是一种针对Canvas元素的专有类型Uint8ClampedArray
webSocket
fetch API
file API

Set和Map数据结构
set，类似于数组，但是成员的值都是唯一的，没有重复的值
var set = new Set([1, 2, 3, 4, 4]);
Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化
Set.prototype.constructor
Set.prototype.size //Set实例的成员总数
add(value); //添加某个值，返回Set结构本身
delete(value); //删除某个值，返回一个布尔值，表示删除是否成功
has(value); //返回一个布尔值，表示该值是否为Set的成员
clear(); //清除所有成员，没有返回值
keys(); //返回一个键名的遍历器，由于Set结构没有键名，只有键值（或者说键名和键值是同一个值）
values(); //默认遍历模式，返回一个键值的遍历器，由于Set结构没有键名，只有键值（或者说键名和键值是同一个值）
entries(); //返回一个键值对的遍历器，每次输出一个数组，它的两个成员完全相等
forEach(); //使用回调函数遍历每个成员
map();
filter();
WeakSet，WeakSet的成员只能是对象，而不能是其他类型的值
var ws = new WeakSet();
WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用，这个特点意味着，无法引用WeakSet的成员，因此WeakSet是不可遍历的
WeakSet.prototype.add(value); //向WeakSet实例添加一个新成员
WeakSet.prototype.delete(value); //清除WeakSet实例的指定成员
WeakSet.prototype.has(value); //返回一个布尔值，表示某个值是否在WeakSet实例之中
Map，类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键
var map = new Map([["name", "张三"], ["title", "Author"]]);
size属性
set(key, value);
get(key);
has(key);
delete(key);
clear();
keys();
values();
entries(); //默认
forEach();
Map本身没有map和filter方法
WeakMap，只接受对象作为键名（null除外），不接受其他类型的值作为键名，而且键名所指向的对象，不计入垃圾回收机制，这个特点意味着，无法引用WeakMap的成员，因此WeakMap是不可遍历的
get();
set();
has();
delete();

Iterator和for...of循环
默认的Iterator接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）
es6中，有三类数据结构原生具备Iterator接口：数组、某些类似数组的对象、Set和Map结构
遍历器对象
next(); //必须部署
return(); //如果for...of循环提前退出（通常是因为出错，或者有break语句或continue语句），就会调用return方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法
throw(); //主要是配合Generator函数使用，一般的遍历器对象用不到这个方法
for...of //不同用于forEach方法，它可以与break、continue和return配合使用

Generator函数
Generator函数是一个状态机
执行Generator函数，会返回一个遍历器对象，代表Generator函数的内部指针
每次调用遍历器对象的next方法，会返回一个有着value和done两个属性的对象
yield
yield语句如果用在一个表达式之中，必须放在圆括号里面
console.log('Hello' + (yield 123));  // OK
yield语句用作函数参数或赋值表达式的右边，可以不加括号
foo(yield 'a', yield 'b'); // OK
let input = yield;  // OK
任意一个对象的Symbol.iterator方法，等于该对象的遍历器对象生成函数，调用该函数会返回该对象的一个遍历器对象
遍历器对象本身也有Symbol.iterator方法，执行后返回自身
yield句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值
for...of循环可以自动遍历Generator函数返回的遍历器对象，且此时不再需要调用next方法
注意，一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象
Generator.prototype.throw();
Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。throw方法有next方法的功能，会向下执行遍历器对象
如果Generator函数内部没有部署try...catch代码块，那么throw方法抛出的错误，将被外部try...catch代码块捕获
如果Generator函数内部部署了try...catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历，否则遍历直接终止，如果此后还调用next方法，将返回一个value属性等于undefined、done属性等于true的对象
Generator.prototype.return();
Generator函数返回的遍历器对象，还有一个return方法，会向下执行遍历器对象，可以返回给定的值，并且终结遍历Generator函数
g.return("foo");  //{ value: "foo", done: true }
如果Generator函数内部有try...finally代码块，那么return方法会推迟到finally代码块执行完再执行
yield*语句，在yield命令后面加上星号，表明它返回的是一个遍历器对象。任何数据结构只要有Iterator接口，就可以被yield*遍历
yield* foo();
如果被代理的Generator函数有return语句，那么就可以向代理它的Generator函数返回数据，相当于用next方法注入参数
Generator与协程
协程与子例程的差异，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态
协程与普通线程的差异，普通线程同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配

Promise对象
Promise，就是一个对象，用来传递异步操作的消息
三种状态：
Pending，Resolved，Rejected
传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应
如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；resolve函数的参数除了正常的值以外，还可能是另一个Promise实例
Promise.prototype.then();
该方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法
Promise.prototype.catch();
该方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数
Promise.all();
该方法用于将多个Promise实例，包装成一个新的Promise实例
var p = Promise.all([p1, p2, p3]);
Promise.race();
Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例
Promise.resolve();
有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用
Promise.reject();
Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected

异步操作和Async函数
es7 async函数
async函数就是Generator函数的语法糖
内置执行器
co模块约定，yield命令后面只能是Thunk函数或Promise对象，而async函数的await命令后面，可以是Promise对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）
async函数的返回值是Promise对象，这比Generator函数的返回值是Iterator对象方便多了。你可以用then方法指定下一步的操作
async函数完全可以看作多个异步操作，包装成的一个Promise对象，而await命令就是内部then命令的语法糖
await命令只能用在async函数之中，如果用在普通函数，就会报错

Class
typeof ClassName === 'function'; // true
类的所有方法都定义在类的prototype属性上面
name属性，ES6的Class只是ES5的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性
Class表达式
const MyClass = class Me { //这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类
  getClassName() {
    return Me.name;
  }
};
不存在变量提升
extends关键字
super关键字，它指代父类的实例（即父类的this对象）
super(x, y); // 调用父类的constructor(x, y);
ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this
es5中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性
Class作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链
（1）子类的__proto__属性，表示构造函数的继承，总是指向父类
（2）子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性
类继承 （extends）的三种特殊情况
第一种特殊情况，子类继承Object类。
class A extends Object {
}
A.__proto__ === Object  // true
A.prototype.__proto__ === Object.prototype  // true
第二种特殊情况，不存在任何继承。与es5继承机制一致
class A {
}
A.__proto__ === Function.prototype  // true
A.prototype.__proto__ === Object.prototype  // true
第三种特殊情况，子类继承null
class A extends null {
}
A.__proto__ === Function.prototype  // true
A.prototype.__proto__ === undefined  // true
ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承
get关键字
set关键字
static关键字
* 关键字
new.target属性 //如果构造函数不是通过new命令调用的，new.target会返回undefined，子类继承父类时，new.target会返回子类
Mixin模式的实现
function mix() {}
class DistributedEdit extends mix(Loggable, Serializable) {
  //...
}

Module
静态化加载
es6的module不是对象，而是通过export命令显式指定输出需要的代码，输入时也采用静态命令的形式，这种加载称为“编译时加载”，即es6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象
es6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，而es6模块输出的是值的引用
ES6模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块
由于ES6输入的模块变量，只是一个”符号连接“，所以这个变量是只读的，对它进行重新赋值会报错
export命令 //export命令可以出现在模块的任何位置，只要处于模块顶层就可以
as关键字 //重命名
import命令 //import命令可以出现在模块的任何位置，import命令具有提升效果，会提升到整个模块的头部，首先执行
export { es6 as default } from './someModule'; //import,export二合一
import语句会执行所加载的模块
import 'lodash'; //仅仅执行lodash模块，但是不输入任何值
模块的整体加载
import * as circle from './circle';
export * from 'circle';
export default命令
import customName, { otherMethod } from './export-default'; //在一条import语句中，同时输入默认方法和其他变量
循环加载 //a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本

Decorator
@readonly...
es7 修饰器（Decorator）是一个表达式，用来修改类的行为。这是ES7的一个提案
修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码
修饰器本质上就是能在编译时执行的函数
修饰器函数可以接受三个参数，依次是目标函数、属性名和该属性的描述对象。后两个参数可省略
修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升
