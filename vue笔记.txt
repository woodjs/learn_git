生命周期
beforeCreate
created
beforeMount
mounted
beforeUpdate
updated
activated
deactivated
beforeDestroy
destroyed
errorCaptured

new Vue、Vue.component、Vue.extend的区别
new Vue创建的是vue实例（与页面中容器元素绑定），Vue.component、Vue.extend创建的是组件实例，new Vue与其它两个仅仅是参数相似而已
Vue.component和Vue.extend没有本质区别，Vue.component需要定义组件名，而Vue.extend不需要，Vue.component内部调用了Vue.extend

全局组件 // 全局注册的行为必须在根Vue实例(通过 new Vue)创建之前发生，require.context
局部组件 // 局部注册的组件在其子组件中不可用

组件名和prop名，PascalCase、camelCase和kebab-case之间会自动转换

this.$options // 组件的选项配置
this.$listeners // 一个对象，里面包含了父组件添加到该组件上的所有监听器
this.$root // 访问根实例
this.$parent // 访问父级组件实例
this.$refs.cmpName // 访问子组件实例或子元素
  当ref和v-for一起使用的时候，将会得到一个包含了对应数据源的这些子组件的数组
  $refs只会在组件渲染完成之后生效，并且它们不是响应式的

指令
参数
修饰符
  事件
  .stop
  .prevent
  .capture
  .self // if (event.target !== event.currentTarget) return
  .once
  .passive
  .enter 
  .13
  .ctrl 
  .alt
  .shift
  .meta
  .native // 想要在一个组件的根元素上直接监听一个原生事件。如果不是监听根元素，需手动通过this.$listeners绑定到对应的元素上
  .sync // 语法糖，通过事件，对prop进行“双向绑定”，约定以update:myPropName的模式触发事件
    this.$emit('update:title', newTitle) // 子
    <text-document // 父
      v-bind:title="doc.title"
      v-on:update:title="doc.title = $event"
    ></text-document>
    ||
    \/
    <text-document v-bind:title.sync="doc.title"></text-document>
    
  v-model // v-model.lazy 
  .lazy // v-model默认在每次input事件触发后将输入框的值与数据进行同步，该修饰符可使得在change事件之后同步
  .number // 自动将用户的输入值转为数值类型
  .trim // 自动清除用户输入的首尾空白字符

动态组件 // <component v-bind:is="currentTabComponent"></component>

异步组件 // require(['./my-async-component'], resolve)、 () => import('./my-async-component')

父子组件attribute合并和替换 // class、style合并，其它属性替换

禁用attribute继承 // 如果你不希望组件的根元素继承attribute。可通过this.$attrs手动绑定到其它元素
Vue.component('my-component', {
  inheritAttrs: false, // 不会影响style和class的绑定
  // ...
})

插槽
v-slot:default="{name}" #default="{name}" // 废弃slot="default"、slot-scope="{name}"
this.$slots // 访问静态插槽的内容
this.$scopedSlots // 访问作用域插槽，每个作用域插槽都是一个返回若干VNode的函数

事件
事件名不存在任何自动化的大小写转换，要始终使用kebab-case的事件名

v-model // 默认会利用名为value的prop和名为input的事件
Vue.component('base-checkbox', {
  model: {
    prop: 'checked',
    event: 'change'
  },
  props: {
    checked: Boolean
  },
  template: `
    <input
      type="checkbox"
      v-bind:checked="checked"
      v-on:change="$emit('change', $event.target.checked)"
    >
  `
})
<base-checkbox v-model="lovingVue"></base-checkbox>

依赖注入 // 可以把依赖注入看作一部分“大范围有效的prop”，但是该方式所提供的property是非响应式的
provide: function () { // 祖先组件
  return {
    getMap: this.getMap
  }
}
inject: ['getMap'] // 子组件

this.$on
this.$off
this.$once
hook:beforeDestroy等特殊的事件名
  this.$once('hook:beforeDestroy', function () { // 销毁组件前，清理第三方库实例
      picker.destroy()
  })


内联模板 // inline-template这个特殊的attribute出现在一个子组件上时，这个组件将会使用其里面的内容作为模板，而不是将其作为被分发的内容
x-template // 在一个<script>元素标签上，将type配置为text/x-template的类型，然后通过一个id将模板暴露出去。x-template需要定义在vue所属的dom元素外
  <script type="text/x-template" id="hello-world-template">
    <p>Hello hello hello</p>
  </script>
  Vue.component('hello-world', {
    template: '#hello-world-template'
  })

v-once // 创建只渲染一次的静态组件

函数式组件和jsx
Vue.component('my-component', {
  functional: true,
  // 为了弥补缺少的实例
  // 提供第二个参数作为上下文
  render: function (createElement, context) { // 
    // ...
  }
})
<template functional>
</template>
将h作为createElement的别名是vue生态系统中的一个通用惯例，实际上也是jsx所要求的
context参数所包含的字段
  props
  children
  slots // 一个函数，返回了包含所有插槽的对象
  scopedSlots
  data
  parent
  listeners
  injections

mixin混入 // 全局混入、局部混入
自定义选项合并策略 // 自定义选项将使用默认策略，即简单地覆盖已有值
  Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) { // 自定义该options选项的合并策略
    // 返回合并后的值
  }

自定义指令 // 全局指令、局部指令
Vue.directive('focus', {
  // 当被绑定的元素插入到 DOM 中时……
  inserted: function (el) {
    // 聚焦元素
    el.focus()
  }
})
<input v-focus />
钩子函数
  bind // 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置
  inserted // 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)
  update // 所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前。指令的值可能发生了改变，也可能没有
  componentUpdated // 指令所在组件的VNode及其子VNode全部更新后调用
  unbind // 只调用一次，指令与元素解绑时调用
钩子函数参数 // 除了el之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行
  el 
  binding
    name 
    value
    oldValue
    arg
    expression
    modifiers 
  vNode 
  oldVNode

自定义过滤器 // 全局过滤器、局部过滤器。过滤器是js函数，因此可以接收多个参数  
Vue.filter('capitalize', function (value) {
  if (!value) return ''
  value = value.toString()
  return value.charAt(0).toUpperCase() + value.slice(1)
})
过滤器可以用在两个地方：双花括号插值和v-bind表达式
  {{ message | capitalize }}
  <div v-bind:id="rawId | formatId('a1', 'a2')"></div>

插件 // 插件的功能范围没有严格的限制
使用插件
  Vue.use(MyPlugin, { someOption: true }) // 第二个参数可选，Vue.use会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件
开发插件 // 插件应该暴露一个install方法。这个方法的第一个参数是Vue构造器，第二个参数是一个可选的选项对象
  MyPlugin.install = function (Vue, options) {
    // 1. 添加全局方法或 property
    Vue.myGlobalMethod = function () {
      // 逻辑...
    }

    // 2. 添加全局资源
    Vue.directive('my-directive', {
      bind (el, binding, vnode, oldVnode) {
        // 逻辑...
      }
      ...
    })

    // 3. 注入组件选项
    Vue.mixin({
      created: function () {
        // 逻辑...
      }
      ...
    })

    // 4. 添加实例方法
    Vue.prototype.$myMethod = function (methodOptions) {
      // 逻辑...
    }
  }

vm // vue实例
vm.$set(target, key, value)  // 新增属性
vm.$delete(target, key)  // 删除属性
vm.$watch(expOrFn, callback, [options])  // 用于观察一个表达式或computed函数在vue实例上的变化，表达式只接受以点分隔的路径，如：a.b.c 
  options配置：
    deep  // 监听对象内部变化
    immediate  // 立即以表达式的当前值触发回调函数

vm.$on(event, callback)
vm.$off([event, callback])
vm.$once(event, callback) 
vm.$emit(event, [...args])

vm.$forceUpdate()
vm.$destroy()
vm.$nextTick(callback)  // 在下一次dom更新循环结束之后执行回调，获得更新后的dom，与全局的Vue.nextTick一样，不同的是回调函数的this自动绑定到调用它的实例上
  vm.$nextTick和dom更新回调都同样属于微任务，如果想在vm.$nextTick中获取更新后的dom，则一定要先更改数据，然后再使用vm.$nextTick注册回调。如果是先使用vm.$nextTick注册回调，再修改数据，则在微任务队列中先执行vm.$nextTick注册的回调，然后执行更新dom的回调，所以回调中得不到最新的dom  
vm.$mount([elementOrSelector])  // 把vue实例挂载到dom元素上

Vue.extend(options)  // 创建一个子类，参数是一个包含组件选项的对象
Vue.nextTick([callback, context])  // 在下一次dom更新循环结束之后执行回调，获得更新后的dom，vue 2.1.0后可以以promise的方式使用
Vue.set(target, key, value)
Vue.delete(target, key)
Vue.directive(id, [definition])  // 注册或获取全局指令
Vue.filter(id, [definition])  // 注册或获取全局过滤器
Vue.component(id, [definition])  // 注册或获取全局组件
Vue.use(plugin)  // 安装插件，如果插件是一个对象，必须提供install方法
Vue.mixin(mixin)  // 全局注册一个混入，影响注册之后创建的每一个vue实例
Vue.compile(template)  // 编译模版字符串并返回包含渲染函数render的对象，只有在完整版的vue中才有效（因为只有完整版包含编译器）
Vue.version  // vue版本
