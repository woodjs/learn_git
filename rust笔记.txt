rust中，占用资源的“量”活多久，通过RAII（保证任何情况下，已构造的对象最终一定会被销毁，即它的析构函数一定会被调用）来手动控制（let绑定），不显式绑定（let）的“量”，都是临时“量”，当前表达式结束时，该资源便会被自动销毁，因此，链式调用时需注意，防止出现悬空指针，编译器报错
rust中，不占资源的“引用”活多久，通过NLL（None Lexical Lifetimes）自动推导
生命周期、借用、引用这些概念针对的是指针
rust中的指针具有保护所指向数据的功能，使得数据具有不可分割性，不可移动部分数据的所有权
想移动指针所指向数据的所有权，需先解引用该指针，使数据成为栈上的值，然后，便可以当作普通栈上变量，分解该数据的所有权
模式匹配默认会移动匹配的值，因此，在不想移动所有权的时候，需用&、&mut标注被匹配的对象（传递性），或在取匹配值的地方使用ref、ref mut
Copy类型可以通过按位复制进行完整的拷贝，只要一个自定类型的所有字段都是Copy，便可以将该类型声明为Copy

孤儿原则 // 禁止覆盖外部类型的原有trait。用于保证别人用你库的时候不会破坏你库里函数的功能
1、当你为某类型实现某trait的时候，必须要求类型或者trait至少有一个是在当前crate中定义的。你不能为第三方的类型实现第三方的trait
2、在调用trait中定义的方法的时候，一定要记得让这个trait可被访问

impl trait和dyn trait区别在于静态分发与动态分发，trait object必须用dyn显式定义
静态分发性能好, 但大量使用有可能造成二进制文件膨胀
动态分发以trait object的概念通过虚表实现，会带来一些运行时开销。又因trait object与Trait在不引入dyn的情况下经常导致语义混淆，所以rust特地引入dyn关键字，在rust 2018中已经稳定

动态大小类型?Sized，如：str、trait object

Send和Sync，这两个trait并不互斥，大多数时候都是同时被实现的，但是并不是强相关，在一些特殊的使用场景中只有单个出现
Send意味着该类型的所有权可以在不同的线程间传递，而实现了Sync则意味着该类型的引用可以在不同的线程间共享。即，Send是指对象在不同线程间传递，Sync是指不可变引用在不同线程间传递
Send和Sync由编译器自动推导，不需要手动是实现

move、copy的应用场景，主要是在变量赋值、函数调用的传入参数、函数返回值、闭包的变量捕获
Copy trait中没有任何方法，所以在copy语义中不可以调用用户自定义的资源复制代码，也就是不可以做deep copy。copy语义就是变量在stack内存的按位复制，没有其他任何多余的操作（即复制堆内存）
Clone是Copy的super trait，一个类型要实现Copy就必须先实现Clone
clone需要显式调用clone方法，用户可以对类型做自定义的资源复制，这就可以做deep copy
Clone trait，对于任何自定义类型都可以实现。Copy trait只有自定义类型中的field全部实现了Copy trait，才可以实现Copy trait
只有类型中的所有field都有Clone，才可以通过#[derive(Clone)]自动实现Clone trait
drop是在变量的作用范围结束时，被自动调用
rust的类型可以实现Drop trait，也可以不实现Drop trait。但是对于类型实现了Copy trait的类型，不能实现Drop trait，因为，如果类型实现了Copy trait，在copy语义中并不会调用Clone::clone方法，不会做deep copy，那就会出现两个变量同时拥有一个资源（比如说是heap内存等），在这两个变量离开作用范围时，会分别调用Drop::drop方法释放资源，这就会出现double free错误
如果变量类型有Drop trait，就先调用Drop::drop方法，做资源清理，一般会回收heap内存等资源，然后再收回变量所占用的stack内存。如果变量没有Drop trait，那就只收回stack内存

闭包捕获变量
如果闭包只是对捕获变量的非修改操作，闭包捕获的是&T类型，闭包按照Fn trait方式执行，闭包可以重复多次执行
如果闭包对捕获变量有修改操作，闭包捕获的是&mut T类型，闭包按照FnMut trait方式执行，闭包可以重复多次执行
如果闭包会消耗掉捕获的变量（和是否使用move关键字无关），变量被move进闭包，闭包按照FnOnce trait方式执行，闭包只能执行一次
具体逻辑如下：
类型实现了Copy，闭包中是&T操作，则闭包按照Fn trait方式执行
类型实现了Copy，闭包中是&mut T操作，则闭包按照FnMut trait方式执行
类型实现了Copy，闭包使用move关键字，闭包中是&mut T操作，此处move关键字的使用，强制copy一个新的变量，将新变量move进闭包，闭包按照FnMut trait方式执行 // 闭包外仍可使用该变量
类型没有实现Copy，闭包中是&T操作，则闭包按照Fn trait方式执行 // immutable borrowed，非move
类型没有实现Copy，闭包中是&mut T操作，则闭包按照FnMut trait方式执行 // mutable borrowed，非move
类型没有实现Copy，闭包使用move关键字，闭包中是&mut T操作，此处move关键字的使用，变量所有权被转移进闭包，闭包按照FnMut trait方式执行 // 闭包外不可使用该变量，除非给该变量绑定新的实例
类型没有实现Copy，闭包中是&mut T操作，捕获的变量被消耗（通过函数返回值转移所有权等方式），则闭包按照FnOnce trait方式执行 // 注意：只能执行一次。本质执行了move（即使未使用move关键字），闭包外不可使用该变量，除非给该变量绑定新的实例
类型没有实现Copy，闭包使用move关键字，闭包中是T操作（Self调用），捕获的变量被消耗，则闭包按照FnOnce trait方式执行

函数、impl块，生命周期编译器自动推导（补全）三大规则： // 注意：如果编译器自动补全后，发现自动补全的生命周期有问题，编译器仍会报错，这时需手动定义正确的生命周期
1、每个引用的参数都有它自己的生命周期参数。例如：
  一个引用参数的函数，其中有一个生命周期： fn foo<'a>(x: &'a i32)
  两个引用参数的函数，则有两个生命周期 ：fn foo<'a, 'b>(x: &'a i32, y: &'b i32)
  以此类推...
2、如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数：
  fn foo(x: &i32) -> &i32   等价于  fn foo<'a>(x: &'a i32) -> &'a i32
3、如果方法有多个输入生命周期参数，不过其中之一因为是方法的缘故为&self或者&mut self，那么self的生命周期被赋予所有输出生命周期参数。例如：
  fn function(&self, x: &str, y: &str, ....) -> &str 

trait关联类型 // 用于定义一个使用多种类型的trait
关联类型用于在trait定义中指定占位符类型，关联类型是一个将类型占位符与trait相关联的方式，trait的实现者会针对特定的实现在这个类型的位置指定相应的具体类型
struct A {
    value: i32,
}
pub trait Iterator { // 用关联类型的方式定义trait，只能为某类型impl一个版本的trait，如：impl Iterator for A，此时编译器可以自动推导，调用方可以直接执行a.next()
  type Item;
  fn next(&mut self) -> Option<Self::Item>;
}
impl Iterator for A {
  type Item = A;
  fn next(&mut self) -> Option<Self::Item> {
    ...
  }
}
pub trait Iterator<T> { // 用泛型的方式定义trait时，可以为某类型impl多个版本的trait，如：impl Iterator<i32> for A、impl Iterator<String> for A，此时编译器不能自动推导，调用方只能标注具体类型通过完全限定语法调用，如：<A as Iterator<i32>>::next(&mut a);
  fn next(&mut self) -> Option<T>;
}

trait默认类型参数 // 单纯的语法糖，impl未传入自定义RHS时，则使用默认的Self，本质上是用泛型的方式定义trait
trait Add<RHS = Self> { // RHS，right hand side
  type Output;
  fn add(self, rhs: RHS) -> Self::Output;
}
impl Add<A> for B {
  ...
}

类型别名 // 语法上和trait关联类型很像，但完全不是一回事。主要作用是简化代码、减少重复。如：将Box<dyn fn() + Send + 'Static>定义别名为Abc，则大大简化了代码书写
type A = i32;

Pin // 保证指针类型背后的值，不被移动，依旧可以访问之前的地址。防止多线程时，未使用Pin时，对象所有权转移，发生拷贝、移动，指针地址未及时更新
大多数类型都不存在移动类型，即实现了UnPin trait
Pin<T>保护的是T内部的指针地址，而非Pin<T>本身的地址
将Pin转换成UnPin：
  1、Box::pin(aPinObject)
  2、pin_mut!(aPinObject)

基础命令
rustc main.rs  // 编译
rustc main.rs -O  // 优化编译
rustdoc main.rs  // 根据注释，生成html文档
cargo --version
Cargo.toml  // 项目数据描述文件，[package]，[dependencies]，[[test]]，[[example]]，[[bin]]
Cargo.lock  // 根据toml文件生成的项目依赖详细清单文件，一般不用管它
cargo build  // 编译，存放至debug文件夹
cargo build --release  // 优化编译，存放至release文件夹
cargo run  // 编译并运行
cargo run --release
cargo new hello_rust --bin  // --bin，将程序编译为一个可执行文件，而不是一个库
cargo update
cargo install
cargo doc  // 根据注释，生成html文档
cargo check

控制台想获取更多的信息，配置rust环境RUST_BACKTRACE=1

cargo镜像
在$HOME/.cargo/config中添加如下内容
[registry]
index = "git://crates.mirrors.ustc.edu.cn/index"
如果所处的环境中不允许使用git协议, 可以把上述地址改为
index = "http://crates.mirrors.ustc.edu.cn/index"
windows用户，在C:\Users\{user}\.cargo目录下新建一个config文件

rust是一个基于表达式的语言，分号与其它基于“大括号和分号”的语言不同，在rust中分号来分隔各个表达式，表达式会返回一个值，而语句不返回值或总是返回()
rust中的语句仅有两种类型：声明语句（如：let语句）和表达式语句（通过在末尾加分号，将表达式变成语句）

rust默认不用指针来存放数据，但当使用trait对象时，会使用指针来储存值

rust，默认一切都是私有的

rust的指针类型有两种，一种为引用（reference &），另一种为原始指针（raw pointer *）

所有权  // ownership
对于任何给定的资源都只有一个绑定与之对应，当一个绑定离开作用域，它们绑定的资源就会释放
copy特性
基本类型（如数字，bool）都实现了copy特性，因此它们的所有权并不遵循“所有权规则”
可通过函数返回值，交还所有权，也可以通过借用，交还所有权

引用和借用
借用与引用是一种相辅相成的关系，若B是对A的引用，则也可称B借用了A
&T类型为一个引用，它借用了该资源的所有权，一个借用变量的绑定在它离开作用域时并不释放资源，因此可再次使用原始的绑定
普通引用是不可变的，就像绑定一样
&mut T类型，可变引用，允许改变借用的资源
*var 访问变量引用的资源
任何借用必须位于比拥有者更小的作用域
规则：
同一时刻，最多只有一个可变借用（&mut T）
同一时刻，可有0个或多个不可变借用（&T）但不能有任何可变借用
借用在离开作用域后释放
在可变借用释放前不可访问源变量

所有权同一时间只能被一处持有，可变引用同一时间只能被一个实例持有，不可变引用则可以被多个实例持有。在rust中，所有权能够被转移，称为move

生命周期
生命周期，定义了一个引用有效的作用域
引用指向一个无效的资源，这叫做悬垂指针（dangling pointer）或者“释放后使用”
fn bar<'a>(x: &'a mut i32) {
}
'a读作“生命周期a”
用<>声明了生命周期，一个函数可以在<>之间有“泛型参数”，生命周期也是其中一种
'static，该作用域是特殊的，它代表某样东西具有横跨整个程序的生命周期
生命周期是可以写多个的，用,分隔。生命周期和泛型都写在<>里，先生命周期后泛型，用;分隔
隐式生命周期，函数返回值的生命周期必须大于或等于其参数的生命周期
显式生命周期推导公式:
当函数输出值R依赖输入值X,Y,Z...，当且仅当输出值的Lifetime为所有输入值的Lifetime交集的子集时，生命周期合法，Lifetime(R) ⊆ ( Lifetime(X) ∩ Lifetime(Y) ∩ Lifetime(Z) ∩ Lifetime(...) )
除非编译器无法自动推导出Lifetime，否则不建议显式指定Lifetime标识符，会降低程序的可读性

包装箱（crate）和模块（module）
包装箱，类似于lib和package，一个独立的可编译单元，编译后，会对应着生成一个可执行文件或一个库
定义模块，用mod关键字来定义我们的每一个模块，分隔逻辑块
导入外部的包装箱，extern crate xxx;  // 必须在Cargo.toml的dependecies字段，加上xxx="version num" 这种依赖说明，才能使引用生效
mod  // 定义模块，mod xxx {}，定义非文件模块，mod xxx; 引用文件模块，xxx，不可包含::，只能为一级
use  // 将名称导入到本地作用域中，use phrases::english::{greetings, farewells};
pub  // 定义公有项，如果一个项是公有的，它能在任何父模块、任何子模块中使用，如果一个项是私有的，它只能在其直接父模块、任何子模块中使用，同一模块（不包括子模块）中的函数，无论私有、公有，可相互调用
pub use  // 重导出，可以在包装箱内用它重导出函数到另一个模块中
pub(crate)  // 限制该导出只在该crate本身中可见，对其它crate不可见，相当于私有
self  // 引用当前模块
super  // 引用父级模块，可连续多次使用，super::super::super::a::test();
as
复杂的导入
extern crate phrases as sayings;
use sayings::japanese::greetings as ja_greetings;
use sayings::japanese::farewells::*;
use sayings::english::{self, greetings as en_greetings, farewells as en_farewells};
几种crate类型
bin, lib, rlib, dylib, cdylib, staticlib

属性  // 目前，不能创建自己的属性，rust编译器定义了它们
属性，以某种方式改变它们附加到的项的意义
#[test]，作用于下一个项
#![test]，作用于包含它的项
属性可以有附加数据
#[inline(always)]
属性也可以有键值
#[cfg(target_os = "macos")]
使用自定义属性
[lib]
proc-macro = true  // procedure macro
示例如下：
#![feature(custom_attribute, proc_macro)]
...
#[derive(HelloWorld)]
#[HelloWorldName = "the best Pancakes"]
...
#[proc_macro_derive(HelloWorld, attributes(HelloWorldName))]
pub fn hello_world(input: TokenStream) -> TokenStream 

注释
//  行注释
/**/  块注释
///  文档注释，内建markdown标记支持，注释之后的项，会生成库文档，一般用于函数或结构体（字段）的说明
//!  模块注释，用来注释包含它的项（crate，模块或者函数），而不是注释位于它之后的项，会生成库文档  // crate，箱

let关键字
有变量绑定和模式匹配的作用
':'，类型注解

const和static
const和static，与let绑定不同，必须指定类型，常量不存在“绑定”之说
const，常量贯穿于整个程序的生命周期。实际上它们会被内联到用到它们的地方，为此对同一常量的引用并不能保证引用到相同的内存地址
static，以静态量的方式提供了类似“全局变量”的功能，在使用时并不内联。这意味着对每一个值只有一个实例，并且位于内存中的固定位置

原生类型  // rust不提供原生类型之间的隐式转换，只能使用as关键字显式转换
bool
char  // 单引号，rust中一个字符占4个字节
数值类型
i8  i16  i32（整型默认）  i64  isize（依赖底层指针大小，取决于操作系统的位数，有符号）
u8  u16  u32  u64（无符号整型默认）  usize（依赖底层指针大小，取决于操作系统的位数，无符号）
f32（单精度）  f64（双精度，默认）

字符串类型  // 最底层的是不定长类型str，两种字符串类型&str（字符串切片）和String（堆分配字符串）
数组  // 具有固定大小，并且元素都是同种类型，可表示为[T; N]
切片  // 引用一个数组的部分数据，并且不需要拷贝，可表示为&[T]，如：&arr[1..4]  // 复制1，2，3元素
元组  // tuples，固定大小的有序列表，每个元素都有可以有自己的类型，通过解构或者索引（tuple.0）来获得每个元素的值，可以用一个逗号来消除一个单元素元组(0,)和一个括号中的值(0)的歧义
指针  // 最底层的是裸指针*const T和*mut T，rust的安全大多来源于编译时检查，不过裸指针并没有这样的保证，当解引用一个裸指针时，要为它并不指向正确的地址负责，为此，需要使用unsafe
函数  // 具有函数类型的变量实质上是一个函数指针，其类型为!，!可用作任何类型：，如：let x: fn(i32) -> i32 = foo;
元类型  // unit，即()，类似于c/c++、java、c#中的void类型

字符串类型  // 原生类型
可变大小的数据结构，两种字符串类型，&str（字符串切片，固定大小且不可变）和String（堆分配字符串，可变）
String转换为&str（通过&*）的代价很小，不过从&str转换到String（to_string()）涉及到分配内存，除非有必要，否则不要这么做
String类型，本质上来讲，是一种堆内存申请的Vec<[u8]>类型，有压入（push）、弹出（pop）
索引，因为字符串是有效utf-8编码的，它不支持索引，字符串切片的索引，索引的是字节偏移，而不是字符偏移
字符串常量  // 类型，&'static str，特殊的字符串切片
字符串常量是静态分配的字符串切片，也就是说它储存在我们编译好的程序中，并且整个程序的运行过程中一直存在
b"abcde"  // b会把字符串转换成一个流，也就是&[u8]类型。使用as_bytes()可以达到同样的目的
r"abc\nde"  // r会禁止转义
r#"abc  // r#，禁止转义且可换行
de"

集合类型
sequences  // Vec, VecDeque(双端队列), LinkedList
maps  // HashMap, BTreeMap(BTree，Balance Tree，多路搜索树，不是二叉树)
sets  // HashSet, BTreeSet
misc（各式各样）  // BinaryHeap

vector  // 向量
vector，动态，可增长的数组，是一种基于堆内存申请的，连续且动态的数据类型，被实现为标准库类型Vec<T>，T必须是Sized，可以使用vec!宏来创建它，拥有O(1)时间复杂度的索引、压入（push）、弹出（pop)
let v = vec![1, 2, 3, 4, 5];  // v: Vec<i32>
let v = vec![0; 10];  // 十个0
访问元素
[]，必须用usize类型的值来索引
越界访问
尝试访问并不存在的索引，前的线程会panic，如果想处理越界错误而不是panic，可以使用像get或get_mut这样的方法，它们在给出一个无效的索引时返回None

HashMap
use std::collections::HashMap;
let mut temp = HashMap::new();  // 方法：insert，contains_key，remove，get

结构体  // 将一些常用的数据、属性聚合在一起，一种记录类型，即使用pub关键字使结构体变为公有的，它的字段仍然是默认私有的，与枚举不同
struct Point<'a> {  // 根据传统，结构体使用大写字母开头，并使用驼峰命名法，结构体中的值默认是不可变的，rust在语言级别不支持字段可变性（mut），因为可变性是绑定（let）的一个属性，而不是结构体自身的，可使用Cell<T>来模拟
  x: i32,
  y: i32,
  z: &'a i32  // 结构体里的引用字段必须要有显式的生命周期，否则，编译器，会因为无法准确的判断获知这个引用的生命周期，而报错
}
访问字段，通过圆点记法  // 如point.x
元组类型结构体
由元组和结构体混合构成，元组结构体有名字，不过它的字段没有  // struct Color(i32, i32, i32);
当元组类型结构体，只有一个元素时，我们称之为新类型（newtype），因为创建了一个与元素类似的类型  // struct Inches(i32);
类单元结构（Unit-like struct）
类单元结构体，即空结构体，定义一个没有任何成员的结构体，它与一个空元组()类似  // struct A;

枚举  // 一种集合类型，代表一系列子数据类型的集合，如果使用pub使枚举变为公有，则它的元素也都是默认公有的
enum Message {
    Quit,
    ChangeColor(i32, i32, i32),
    Move { x: i32, y: i32 },  // 匿名结构体
    Write(String)  // 构造器，构造器可以作为函数，当要用到闭包时，可以将函数作为参数传递给其他函数
}
::  // 通过::来获得枚举中每个元素的名称

type关键字  // 定义某个类型的别名，type NameA = String;

if语句  // 其实是一个表达式，let y = if x == 5 { 10 } else { 15 }; ，一个没有else的if总是返回()作为返回值
if x == 5 {

} else if x == 6 {

} else {

}
if let  // 模式匹配，if let Some(x) = option {} else {}

循环
loop {}  // 无限循环，直到一些终止语句被执行，与while true的主要区别在于编译阶段的静态分析
while judge {}  // 不确定应该循环多少次
while let  //  模式匹配，while let Some(x) = v.pop() {}
for var in expression {}  // 循环特定的次数，expression是一个迭代器如1..10（不包括上限值10）
break;  // loop, while, for
continue;  // while, for
循环标签，主要用于嵌套循环的流程控制
'test: for i in 0..10 {  // 注意，标签名单引号并未闭合
  continue 'test;
}

迭代器 => 适配器（惰性求值，对序列进行筛选等操作，生成另一个迭代器，可以链式调用） => 消费者（将迭代器转换成其他类型的值，而非另一个迭代器）

match  // 匹配，属于模式匹配的范畴，每个分支的表达式的最终返回值类型必须相同
match x {
  e @ 1 ... 5 | e @ 8 ... 10 => println!("got a range element {}", e),  // |，用于匹配多个值，...，匹配一个范围（包含最后一个值，经常用在整数和char上），如果需要得到|或者...匹配到的值，可以使用@绑定变量
  ...  // ..，用来忽略部分数据，ref和ref mut，用来在模式中得到一个引用
  _ => println!("test");  // 必须包含_，因为match强制进行穷尽性检查，必须覆盖所有的可能值
}
守卫  // guard，可以用if来引入匹配守卫
let x = 4;
let y = false;
match x {
  4 | 5 if y => println!("yes"),
  _ => println!("no"),
}

函数
定义函数时，必须为函数参数声明类型，这是一个全推断与无推断的最佳平衡，rust中函数只能返回一个值
return关键字
return false;  // 分号不可省略
发散函数  // 发散函数，不返回，调用发散函数会导致当前线程崩溃
fn diverges() -> ! { // 返回类型!，!，可用作任何类型
  panic!("This function never returns!");
}
高阶函数，可以把函数作为参数和返回值
函数类型  // fn(i32) -> i32;，在rust中，函数的所有权是不能转移的，给函数类型的变量赋值时，赋给的一般是函数的指针
rust允许在函数内定义函数，但不能在子函数中引用父函数中（环境中）的变量，若要引用，应该使用闭包

闭包  // 匿名函数，闭包，可以省略参数和返回值的类型，闭包实际上是trait的语法糖
let plus_two = |x| {
  let mut result: i32 = x;
  result += 1;
  result += 1;

  result
};
move关键字，强制使闭包取得它所属环境所有变量的所有权，得到一个属于自己的栈帧。没有move，一个闭包可能会绑定在创建它的栈帧上
返回闭包  // 通过把内部闭包变为move Fn，从而为闭包创建了一个新的栈帧。通过Box装箱，提供一个已知大小的返回值，并允许它离开当前的栈帧

方法  // 即关联函数
impl关键字  // impl关键字定义的函数又称为方法（关联函数），可用在struct、enum或者trait对象上
struct Circle {
  x: f64,
  y: f64,
  radius: f64
}
impl Circle {
  fn area(&self) -> f64 {
    std::f64::consts::PI * (self.radius * self.radius)
  }
}
fn main() {
  let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };
  println!("{}", c.area());
}
方法的第一参数通常为self参数。它有3种变体：
self  // 允许实现者移动和修改对象，对应的特性为FnOnce
&self  // 既不允许实现者移动对象也不允许修改，对应的特性为Fn
&mut self  // 允许实现者修改对象但不允许移动，对应的特性为FnMut
链式方法调用  // 通过在方法内部返回self来做到这一点
静态方法  // 即不含self参数的关联函数，此时，通过::调用

trait  // 特性，描述某类型需要实现的抽象接口，即告诉rust编译器，一个类型需要提供哪些功能，可以为任何类型实现一个trait，特性也可以接受泛型参数
默认方法  // 在trait中已经实现的方法
在调用trait中定义的方法时，需要引入该trait，否则，会报错
几个有用的标准库内置的特性（trait）：Drop, Borrow, AsRef, Deref<Target=T>（强制转换）, Iterator, Sized...
struct Circle {
  x: f64,
  y: f64,
  radius: f64,
}
trait HasArea {
  fn area(&self) -> f64;
}
impl HasArea for Circle {
  fn area(&self) -> f64 {
    std::f64::consts::PI * (self.radius * self.radius)
  }
}
trait继承
trait Foo {
  fn foo(&self);
}
trait FooBar : Foo {
  fn foobar(&self);
}

通用函数调用语法  // 如果两个不同特性的方法具有相同的名称，可以使用通用函数调用语法
Trait::method(args);  // 简写
<Type as Trait>::method(args);  // 展开

Deriving  // 让rust自动实现某trait
#[derive(Debug)]
struct Foo;
fn main() {
  println!("{:?}", Foo);
}
derive只适用于一些特定的trait：
Clone
Copy
Debug
Default
Eq
Hash
Ord
PartialEq
PartialOrd

trait bound
泛型函数的trait bound  // 带有trait限制的泛型函数是单态的，所以它是静态分发的
trait HasArea {
  fn area(&self) -> f64;
}
fn print_area<T: HasArea>(shape: T) {
  println!("This shape has an area of {}", shape.area());
}
泛型结构体的trait bound
struct Rectangle<T> {
  x: T,
  y: T,
  width: T,
  height: T,
}
impl<T: PartialEq> Rectangle<T> {
  fn is_square(&self) -> bool {
    self.width == self.height
  }
}
多trait bound
fn foo<T: Clone + Debug>(x: T) {
  x.clone();
  println!("{:?}", x);
}
where从句
fn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {
  x.clone();
  y.clone();
  println!("{:?}", y);
}

泛型  // 泛型是一种多态
泛型在类型理论中叫做参数多态，意为对于给定参数可以有多种形式的函数或类型
泛型函数  // 静态分发
fn takes_anything<T>(x: T) {
  // do something with x
}
泛型结构体
impl<T> Point<T> {  // 给泛型struct增加一个实现
  fn swap(&mut self) {
    std::mem::swap(&mut self.x, &mut self.y);
  }
}

特性对象（trait object）和多态函数
trait对象在rust中是指使用指针封装了的trait，比如&SomeTrait和Box<SomeTrait>，&SomeTrait类型和普通的指针类型&i32不同。它不仅包括指向真实对象的指针，还包括一个指向虚函数表的指针，其内部实现定义在std::raw模块
多态函数有两种分发机制：静态分发（泛型函数）和动态分发（trait object）
静态分发，允许函数被内联调用，能提高程序的运行效率，会导致“代码膨胀”（code bloat）。因为在编译出的二进制程序中，同样的函数，对于每个类型都会有不同的拷贝存在
动态分发，它只有一份函数的代码，因为调用虚函数，会带来更大的运行时开销，也会大大地阻止任何内联以及相关优化的进行
虚函数表（由编译器创建和管理），在一个trait对象上通过一个特殊的函数指针记录可被调用的特性函数
rust通过引入特性对象(trait object)来实现， 在运行期查找虚函数表来选择执行的方法。
并不是所有trait都可以被用来作为一个trait对象，只有对象安全的trait才能成为trait对象
下面的情况下，trait object无法构造出来：
1、当trait有Self:Sized约束时 
2、当函数中有Self类型作为参数或者返回类型时  // Self关键字代表的类型是实现该trait的具体类型
3、当函数第一个参数不是self，&self, &mut self时  // 即静态方法，但是可以通过为函数加上Self: Sized约束，阻止该函数在虚函数表中出现，从而不影响trait object的创建
4、当函数有泛型参数时

Option
enum Option<T> {
  Some(T),
  None
}
方法：
unwrap  // 遇到None值会panic
map  // 如果有值，会执行作为参数传入的函数，反之直接返回None
unwrap_or  // 可传入一个默认值，当值为None时会返回该默认值
and_then  // 与map类似，但and_then会返回另一个Option
ok_or  // 在值为None时，返回一个Result::Err(E)，值为Some(T)时，返回Ok(T)

Result  // Result是Option的更通用的版本，比起Option，结果为None时，它解释了结果错误的原因
enum Result<T, E> {
  Ok(T),
  Err(E)
}
方法：  // 拥有很多与Option类似的方法
unwrap
unwrap_or
and_then
map_err  // 当值为Err(E)时，调用作为参数传入的函数来处理错误
or_else

try!  // 事实上就是match Result的封装，当遇到Err(E)时会提早返回，所有的错误都转化成Box<Error>，try!不能直接放在main函数里，此时，编译器会报错，因为main函数无返回值

?运算符  // try!的语法糖，当遇到Err(E)时会提早返回，let mut file = File::open("foo.txt")?;

不定长类型
?Sized，这个?，读作“T可能是Sized的”，意味着这个限制是特殊的：它让我们的匹配更宽松
struct Foo<T: ?Sized> {
  f: T
}

类型转换
as用于安全转换，transmute允许任意的转换
指针转换，裸指针与整型之间的转换是安全的
transmute，至少它确保了这些类型是相同大小的
use std::mem;
unsafe {
  let a = [0u8, 0u8, 0u8, 0u8];

  let b = mem::transmute::<[u8; 4], u64>(a);
}

宏
宏，是一个“展开后的”句法形式的速记，是用来生成代码的，在调用宏的地方，编译器会先将宏进行展开，生成代码，然后再编译展开后的代码
vec!宏，用来初始化一个任意数量元素的vector
macro_rules! vec { ... }  // 定义宏
卫生宏
一些语言使用简单的文本替换来实现宏，而卫生宏，编译器或运行时会保证宏里面定义的变量或函数不会与外面的冲突，在宏里面以普通方式定义的变量作用域不会跑到宏外面
#[macro_use]  // 宏导入
#[macro_export]  // 宏导出
调试宏
--pretty=expanded  // 使得可以看到展开后的代码
常用宏
panic!，这个宏导致当前线程恐慌
vec!，它也让你可以用重复值创建vector
assert!和assert_eq!
try!，try!用来进行错误处理
unreachable!，这个宏用于当你认为一些代码不应该被执行的时候
unimplemented!，unimplemented!宏可以被用来当你尝试去让你的函数通过类型检查，同时你又不想操心去写函数体的时候

不安全代码
unsafe关键字，使用unsafe的代码比正常代码有更少的限制
常见用途：
访问和更新一个静态可变变量
解引用一个裸指针
调用不安全函数

外部函数接口（FFI，Foreign Function Interface）
需要引入libc库来表达对应ffi函数中的数据类型

智能指针（smart pointer）是存储指向动态分配(堆)对象指针的类，用于生存期控制，能够确保自动正确的销毁动态分配的对象，防止内存泄露，一种通用的实现技术是使用引用计数
几种智能指针：
Rc和Arc使用引用计数的方法，让程序在同一时刻，实现同一资源的多个所有权拥有者，多个拥有者共享资源
Rc  // 用于同一线程内部，从use std::rc::Rc来引入
Rc Weak  // Rc是一个引用计数指针，而Weak是一个指针，但不增加引用计数，不会对资源回收管理造成影响，从use std::rc::Weak来引入
Arc  // Rc的多线程版本，用于跨线程共享一个对象，从std::sync::Arc引入
Arc Weak  // 从std::sync::Weak引入
Mutex  // Mutex意为互斥对象，通过锁，来保护共享数据，同时只有一个线程的Mutex对象获取到锁，从use std::sync::Mutex引入
RwLock  // 读写锁，同时允许多个读，最多只能有一个写，读和写不能同时存在
Cell  // 不受编译期静态借用规则束缚，Cell<T>只能用于T实现了Copy的情况
RefCell  // 在不确定一个对象是否实现了Copy时，直接选RefCell，只能用于线程内部，不能跨线程

裸指针（原始指针）
不能保证指向有效的内存，甚至不能保证是非空的
没有任何自动清除，所以需要手动管理资源
是普通旧式类型，它不移动所有权，因此rust编译器不能保证不出像释放后使用这种bug
缺少任何形式的生命周期，不像&，因此编译器不能判断出悬垂指针（dangling pointer）
除了不允许直接通过*const T改变外，没有别名或可变性的保障

交叉编译
musl
CROSS_COMPILE=x86_64-linux-musl- cargo build --release --target=x86_64-unknown-linux-musl
