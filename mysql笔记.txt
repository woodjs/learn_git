三大范式
第一范式(1NF)
所有的列都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项
第二范式(2NF)
要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系
第三范式(3NF)
确保表中各列与主键列直接相关，而不是间接相关。即各列与主键列都是一种直接依赖关系

关键字和函数名，规定大写
可用反引号`包裹标识符(库名、表名、字段名、索引、别名...)，以避免与关键字重名

锁
共享锁  // 读锁，不阻塞
独占锁  // 写锁，阻塞

分区表不是分库分表

整数: tinyint, smallint, mediumint, int, bigint  // 1字节，2字节，3字节，4字节，8字节，默认存在符号位，可通过unsigned属性修改。int(m)，在mysql中并不能改变占用空间大小，对值的范围没有任何影响，实际上是一个错误的用法，但很多人在用。想以0填补前面缺少的位数，可通过zerofill属性修改
浮点数: float(m, d), double(m, d)  // 4字节，8字节，支持unsigned，zerofill
定点数: decimal(m, d)  // 每4字节存储9个数字，小数点占用一个字节，浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值，一般用于金额

时间日期: date, time, datetime, timestamp, year  // 3字节，3字节，8字节，4字节，1字节，datetime和时区无关，时间范围大，timestamp，和时区相关，时间范围小，>= 5.7版本，datetime(m)，timestamp(m)存储微秒数据。不要用字符串存储日期类型的数据，存储空间占用大，不利于查询过滤，不可以使用内置的日期处理函数

字符串类型
字符串: char(m), varchar(m)  // 0-255字节，0-65535字节，但是括号中的m，代表的是字符数而不是字节数。char，定长，速度快，但浪费空间，适合短或经常更新的字符串，varchar，不定长，速度慢，但节省空间，适合长或不经常更新的字符串。m，定义宽度，是以字符为单位的，而不是字节，很多人用错了
文本: tinytext, text, mediumtext, longtext  // 0-255字节，0-65535字节，0-16777215字节，0-4294967295字节，不需要定义长度，不可给default值
enum('v1', 'v2', ...)  // 单选字符串，enum的选项都会对应一个数字，依次是1，2，3，4，5...，最多有65535个选项
set('v1', 'v2', ...)  // 多选字符串，set的每个选项值也对应一个数字，依次是1，2，4，8，16...，最多有64个选项，null值的索引是null，空字符串错误值的索引值是0

二进制数据(可用来存储图片、音乐等)  // blob(binary large object)
tinyblob, blob, mediumblob, longblob  // 0-255字节，0-65535字节，0-16777215字节，0-4294967295字节

选择指定的数据库
登录时选择
mysql -D database_name -h host_name -u username -p  // --prompt: 修改命令提示符，－P: 端口，-V: 版本
登录后选择
use database_name;  // use语句可不加分号

显示所有数据库
show databases;

创建数据库
create database database_name [options];

查看库中所有的表
show tables;

列的属性和约束
primary key | unique key | foreign key | key  // primary key，unique key会自动添加索引
auto_increment
null | not null
default value
reference  // 外键约束，尽量不要使用，影响性能、更改、维护，但建立索引很必要
comment

创建表
CREATE TABLE `test` (
    `id` int(32) UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,  -- 主键可以有多个，复合主键
    `username` VARCHAR(20) NOT NULL,
    `date` DATETIME NOT NULL,
    `overtime` FLOAT(4,2) DEFAULT 0.0,
    `create_time` DATETIME NOT NULL,
    `update_time` DATETIME NOT NULL,
    INDEX (`date`, `overtime`)
    KEY `username` (`username`),  -- 第一个`username`，键名
    UNIQUE KEY `username` (`username`),
    CONSTRAINT `work_record_ibfk_1` FOREIGN KEY (`username`) REFERENCES `user` (`username`)  // {on update | on delete}， {cascade | set null | restrict}
    -- cascade: 主表数据被更新(主键值更新)，从表也被更新(外键值更新)。主表记录被删除，从表相关记录也被删除
    -- set null: 主表数据被更新(主键值更新)，从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束
    -- restrict: 拒绝父表删除和更新
) ENGINE = InnoDB DEFAULT CHARSET = utf8;

建立索引
create index index_name [using {hash | btree}] on table_name (field_name);

查看某张表的详细信息
desc table_name;
describe table_name;
show create table table_name;  // 信息更详细

向表中插入数据
insert [into] table_name (field_1, field_2, ...) values (value_1, value_2, ...);

查询表中的数据
select field_1, field_2, ... from table_name where [condition];
condition
1、=, >, <, >=, <=, !=, <>
2、is [not], [not] null, [not] in, [not] like...  // 使用like时，_: 任意单个字符，%: 任意多个字符，单引号需要进行转义\'
3、or, and
group by  // 必须在查询结果中包含一个聚集函数
having
order by field_name desc  // 默认asc
limit 1  // limit 0, 1 <=> limit 1 offset 0
offset 0
其它
distinct  // select distinct id, name from user，主要用于去重，效率比group by高，group by的设计目的是用于聚合统计
union [all]
join  // 当连接字段的值在两表中都存在时才连接，即连接结果不出现半行为空
left join  // 当连接字段的值在右表中不存在，左表记录仍会出现，而右表字段全部以null填充
right join  // 当连接字段的值在左表中不存在，右表记录仍会出现，而左表字段全部以null填充

更新表中的数据
update table_name set field_1=value_1, field_2=value_2, ... where [condition];

删除表中的数据
delete from table_name where [condition];  // 删除表中所有数据，delete from table_name;

事务
{start transaction | begin}; commit; rollback;
原子性(Atomicity)
一致性(Consistency)
隔离性(Isolation)  // 一个事务对数据库中数据的修改，在未提交前对其它事务的可见性
  隔离级别：
    1、未提交读(read-uncommitted)，脏读，即使事务未提交，修改也对其它事务可见，一般不会用到
    2、已提交读(read-committed)，oracle, sql server等默认
    3、可重复读(repeatable-read)，mysql默认，innodb默认，同一事务中多次执行同样的读取操作得到的数据是一致的，即使其它事务已对数据作出修改并提交
    4、可串行化(serializable)，最高的隔离级别，会在读取的每一行数据上都加锁，一般只用于没有并发且对数据一致性严格要求的情况
持久性(Durability)

视图
create view view_name as ...

存储过程
create procedure procedure_name (args...)
begin
  ...
end;

触发器  // 记录的增加、修改、删除
create trigger trigger_name ...

sql编程
定义变量
set @my = 1;  // 用户自定义变量在变量名前使用@作为开始符号，select @my:=1，:代表赋值，避免与判断相等冲突

if语句
if ... then ...
elseif ... then ... 
else ...
end if;

case语句
case value 
when ... then ...
else ...
end;

while语句
begin_label: while ... do 
  ...
end while end_label;  

自定义函数
create function function_name (args...)
  ...
returns ...;  

内置函数
数值函数
abs(x)  // 绝对值 abs(-10.9) = 10
format(x, d)  // 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46
ceil(x)
floor(x)
round(x)
mod(m, n)  // 求余
pi()  // 获得圆周率
pow(m, n)  //  m^n
sqrt(x)  // 算术平方根
rand()  // 随机数
truncate(x, d)  // 截取d位小数

时间日期函数
now(), current_timestamp()  // 当前日期时间
current_date()  // 当前日期
current_time()  // 当前时间
date('yyyy-mm-dd hh:ii:ss')  // 获取日期部分
time('yyyy-mm-dd hh:ii:ss')  // 获取时间部分
date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j')  // 格式化时间
unix_timestamp()  // 获得unix时间戳
from_unixtime()  // 从时间戳获得时间

字符串函数
length(string)  // string长度，字节
char_length(string)  // string的字符个数
substring(str, position [,length])  // 从str的position开始，取length个字符
replace(str, search_str, replace_str)  // 在str中用replace_str替换search_str
instr(string, substring)  // 返回substring首次在string中出现的位置
concat(string [,...])  // 连接字串
charset(str)  // 返回字串字符集
lcase(string)  // 转换成小写
left(string, length)  // 从string中的左边起取length个字符
load_file(file_name)  // 从文件读取内容
locate(substring, string [,start_position])  // 同instr，但可指定开始位置
lpad(string, length, pad)  // 重复用pad加在string开头,直到字串长度为length
ltrim(string)  // 去除前端空格
repeat(string, count)  // 重复count次
rpad(string, length, pad)  // 在str后用pad补充,直到长度为length
rtrim(string)  // 去除后端空格
strcmp(string1, string2)  // 逐字符比较两字串大小

聚合函数
max()
min() 
avg()
sum()
count()
group_concat()

其他常用函数
md5()
default()

追加列
alter table table_name add [column] field_name_1 value_type [after {field_name_2 | first}];
修改列
alter table table_name modify new_value_type ...;  // 支持对字段属性进行修改，不能修改字段名，所有原有属性也需写上
alter table table_name change old_field_name new_field_name new_value_type ...;  // 支持对字段名修改
删除列
alter table table_name drop field_name;
主键
alter table table_name add primary key (field_name);
alter table table_name drop primary key;  // 删除主键前需删除其AUTO_INCREMENT属性
外键
alter table table_name add foreign key [index_name] (field_name);  // index_name，索引名可选
alter table table_name drop foreign key field_name;  
索引
alter table table_name add index [index_name] (field_name);  // index_name，索引名可选
alter table table_name drop index index_name;
重命名表
alter table old_table_name rename new_table_name;
rename table old_table_name to new_table_name;
rename table old_table_name to [database_name][.]new_table_name;  // 可将表移动到另一个数据库
删除表
drop table if exists table_name;
清空表数据
truncate table table_name;  // 重置auto_increment的值
复制表结构
create table new_table_name like old_table_name;
复制表结构和数据
create table new_table_name as select * from old_table_name;
删除数据库
drop database database_name;
检查表是否有错误
check table table_name;
修复表错误
repair table table_name;

导出表数据
select * into outfile 文件地址 [控制格式] from table_name;  // outfile可以为任意文件格式，如：a.text
导入数据
load data [local] infile 文件地址 [{replace | ignore}] into table table_name [控制格式];  // local未指定，则数据文件必须在服务器上，replace和ignore关键词控制对现有的唯一键记录的重复的处理

备份与还原 
备份  // 将数据的结构与表内数据保存起来
mysqldump -u username -p {password} database_name table_name > a.sql;  // 导出一张表，-w，携带备份条件
mysqldump -u username -p {password} database_name table_name_1 table_name_2 table_name_3 > a.sql;  // 导出多张表
mysqldump -u username -p {password} database_name > a.sql;  // 导出所有表
mysqldump -u username -p {password} -B database_name > a.sql;  // 导出一个库
xtrabackup  // 第三方工具，不锁表，推荐使用
还原
source a.sql
mysql -D database_name -h host_name -u username -p < a.sql

用户管理  // mysql.user表
flush privileges  // 刷新权限
增加用户
carete user username [identified by [password] 'password'];
重命名用户
rename user old_username to new_username;
删除用户
drop user username;
设置密码
alter user 'root'@'localhost' identified by 'youpassword' // 已验证
set password = password('password')  // 为当前用户设置密码
set password for username = password('password')  // 为指定用户设置密码
mysqladmin -u username -p password new_password

权限管理
分配权限/添加用户
grant 权限列表 on table_name to username [identified by [password] 'password'];
查看权限
show grants;  // 查看当前用户权限
show grants for username;
撤消权限
revoke 权限列表 on table_name from username;
revoke all privileges, grant option from username // 撤销所有权限

mysql常用配置：
default-character-set＝utf8
default-storage-engine=InnoDB  // 默认存储引擎

常用命令和函数
delimiter //;  // 自定义命令结束符
select version();  // 数据库版本
select user();  // 当前用户
select database();  // 当前数据库
show variables like '%isola%'  // 查看数据库隔离级别
set session tx_isolation = 'read-committed';  // 设置事务隔离级别为已提交读
set names gbk;  // 设置shell客户端文字编码
explain select * from table_name;  // 显示执行计划

---

性能管理和架构设计

影响性能的主要因素
数据库结构设计
  平衡范式化和反范式化，减少数据冗余和维护异常，反范式化更便于索引优化
  当一个字段可以选用多种数据类型时，优先级，数字类型 > 日期类型，二进制类型 > 字符串类型
  对于相同级别的数据类型，优先选择占用空间小的数据类型
  主键应该尽可能小，因为每个非主键索引都会携带主键信息
  主键最好顺序增长，从而避免随机io
  innodb的主键和业务主键可以不同
索引
  索引类型
    btree  // innodb默认，适合范围查找，键值按顺序存储，利于排序，b，balance
    hash  // 适合查询条件精确匹配，无法用于排序，使用hash索引的列的值不要重复度太高，如性别
  索引的负面作用
    增加写操作成本
    过多的索引会影响查询性能
  策略
    过滤条件中索引列上不能使用表达式或函数
    对长字符串列使用前缀索引  // 索引对建立索引的列的大小有限制，innodb 767字节，myisam 1000字节，create index on table_name (field_name(m))
    联合索引，索引列的顺序
      经常被使用到的列优先
      选择性(区分度)高的列优先
      宽度小的列优先
    覆盖索引，该索引包含查询的所有字段  // 优化缓存，减小磁盘io，不能使用双%的like查询
  扩展数据库查询  
  优化
    删除重复或冗余的索引  // 第三方工具，pt-duplicate-key-checker -h 127.0.0.1
    删除从不被使用的索引
效率低下的sql  // 百分之80的性能问题是由效率低下的sql引起的
  获取效率低下的sql
    用户反馈
    通过慢查日志获取问题sql
    实时获取问题sql    
  慢查日志
    配置
      slow_query_log  // {on | off}，默认不开启
      slow_query_log_file  // 慢查日至文件名和存储路径
      long_query_time  // 基准时间，超过该时间就记录的慢查日志中，单位s，可以精确到微秒，默认10s，建议0.001s
      log_queries_not_use_indexes  // 是否记录未使用索引的sql
    分析工具
      mysqldumpslow  // mysql自带
      pt-query-digest  // 第三方，功能更强大，提供的统计信息更全
  实时获取问题sql
    通过information_schema数据库下的PROCESSLIST表获得，通过脚本周期性执行查询
  确定查询各个阶段消耗的时间
    使用profile  // mysql自带，但5.5后已不建议使用，set profiling = 1; {query语句}; show profiles; show profile for query {profile_id};
    performance_schema  // 一个存储引擎，默认关闭，>=5.5版本自带，官方推荐
  优化
    写操作比较频繁时，不要使用查询缓存，因为一般很难匹配  // query_cache_type = {ON | OFF | DEMAND}，设置查询缓存是否可用，query_cache_size = 0
    将not in或<>子查询改成join
    使用汇总表优化查询
大表  // 单表超过千万行或表数据文件超过10G，导致慢查询、主从延迟(锁表)
  分库分表(垂直切分，水平切分)，难度大，注意避免影响线上业务
  大表历史数据归档，可以把归档表放到不同的服务器上
  表结构更改可使用如下几个方案
    先在从库修改表结构，然后主从切换，然后再修改切换后的从库
    在主库建立新的表，然后同步数据到新表，更改新表名称，减少锁表时间
    使用第三方工具pt-online-schema-change
大事务  // 运行时间比较长，操作的数据比较多的事务，锁太多造成大量阻塞和锁超时，回滚慢，执行慢容易造成主从延迟
  避免一次处理太多的数据，可分批处理
  移除事务中不必要的select   
数据库存储引擎  // 存储引擎针对的是表而不是库，不同的表可以使用不同的存储引擎，但是，最好不要混合使用存储引擎，因为，事务、热备份等功能支持不一致，要特别注意
  MyISAM  // <= mysql 5.5.8的版本默认的存储引擎
    表级锁，并发一般，适用于读操作，支持修复损坏的表(repair table ...)，支持全文索引，支持表数据压缩(myisampack命令)
    < 5.0版本，默认表大小最大4G。可通过建表时设置MAX_Rows，AVG_ROW_LENGTH更改
    > 5.0版本，默认表大小最大256TB
    适用场景：非事务型应用，只读类应用，空间类应用(支持空间函数。如存储gps)
  InnoDB
    innodb_file_per_table  // on | off，设置表数据存储空间，独立表空间(方便使用optimize table压缩表空间)还是系统表空间，>== 5.6版本，默认on
    事务型存储引擎，行级锁，高并发，支持在线热备份(不是mysqldump)
    redo log，undo log
    show engine innodb status;  // 查看innodb工作记录
    适用场景：基本都适用
  CSV
    数据以文本方式(CSV格式)存储在文件中，可直接查看、编辑
    不支持索引
    适用场景：作为数据交换的中间表，如：excel -> csv文件 -> mysql数据目录
  Archive
    以zlib压缩表数据，占用空间小，磁盘io少，性能不错
    只支持insert、select
    只允许在自增id列上加索引
    行级锁
    不支持事务
    适用场景：日志和数据采集类应用
  Memory
    所有数据保存在内存中，一旦mysql重启，数据会丢失
    表级锁
    io性能比MyISAM高很多
    支持hash索引(等值查询快，默认)、btree索引(范围查询快)
    不支持text、blob
    max_heap_table_size  // 设置最大表大小，默认16M
    适用场景：查找或映射表，数据分析中间表，缓存周期性聚合数据的结果表
  Federated  // 默认不支持，需手动开启
    提供了访问远程mysql服务器上表的功能，本地不存储数据，只存储表结构和远程数据库连接信息
    性能不太好
    适用场景：偶尔的统计分析及手工查询
数据库配置参数
  获取配置信息方式
    命令行参数  // 如：mysqld_safe --data-dir=/data/a/
    配置文件  // 查看配件文件加载路径和顺序，msyqld --help --verbose | grep -A 1 'Default options'
  设置全局参数  // 有些全局参数的设置，只对之后的连接的有效
    set global 参数名 = 参数值;
    set @@global.参数名 := 参数值;
  设置会话参数 
    set [session] 参数名 = 参数值;
    set @@session.参数名 := 参数值;
  内存相关的参数
    为每个连接分配内存
      sort_buffer_size  // 排序缓冲区尺寸
      join_buffer_size  // 联结缓冲区尺寸，一个查询可能有多个join
      read_buffer_size  // 设缓冲区尺寸  
      read_rnd_buffer_size  // 索引缓冲区尺寸
    为缓存池分配内存
      Innodb_buffer_pool_size  // innodb缓存池大小，计算公式：总内存 - (每个连接需要的内存 * 连接数) - 系统保留内存
      key_buffer_size  // 主要用于MyISAM，设置索引缓存池大小
  io相关的参数
    InnoDB io配置
      Innodb_log_file_size  // 单个事务日志大小
      Innodb_log_files_in_group  // 事务日志文件的数目  
      Innodb_log_buffer_size  // 事务日志缓冲区大小
      Innodb_flush_log_at_trx_commit  // 刷新日志到磁盘的频率，{0 | 1(默认，安全性高，性能差) | 2}，建议使用2
      Innodb_flush_method  // 刷新方式，建议O_DIRECT
      Innodb_file_per_table  // 表空间的建立，建议1
      Innodb_doublewrite  // innodb是否使用双写缓存，建议1
    MyISAM io配置
      delay_key_write  // {OFF | ON | ALL}，是否每次写操作都刷新缓冲区的脏块到磁盘中
  安全相关的配置
    expire_logs_days  // 自动清理binlog的天数
    max_allowed_packet  // 定义mysql所能接收的最大包的大小
    skip_name_resolve  // 禁用dns查找
    sysdate_is_now  // 确保sysdate()返回确定性日期
    read_only  // 禁用非super权限用户写操作，一般在从库中使用
    skip_slave_start  // 禁用slave自动恢复，一般在从库中使用
    sql_mode  // mysql使用的sql模式，{only_full_group_by | ...}
  其它常用配置      
    sync_binlog  // 如何向磁盘刷新binlong
    tmp_table_size  // 内存临时表大小
    max_heap_table_size  // 内存临时表大小
    max_connections  // 最大连接数，默认100，建议2000 
服务器操作系统
  CentOS参数优化
    内核相关参数(/etc/sysctl.conf)
      网络参数
      net.core.somaxconn = 65535  // 设置每个端口最大的监听队列长度
      net.core.netdev_max_backlog = 65535  // 设置发送到队列中的数据包的最大缓存数
      net.ipv4.tcp_max_syn_backlog = 65535  // 未连接的请求最大缓存数
      加快tcp连接的回收
      net.ipv4.tcp_fin_timeout = 10  // 连接超时时间
      net.ipv4.tcp_tw_reuse = 1
      net.ipv4.tcp_tw_recycle = 1
      设置tcp连接接受和发送缓冲区大小的默认值
      net.core.wmem_default = 87380
      net.core.wmem_max = 16777216
      net.core.rmem_default = 87380
      net.core.rmem_max = 16777216
      减少失效连接占用的tcp资源的数量，加快资源回收的效率
      net.ipv4.tcp_keeplive_live = 120
      net.ipv4.tcp_keeplive_intvl = 30
      net.ipv4.tcp_keeplive_probes = 3
      内存相关参数
      kernel.shmmax = 4294967295  // 内核参数中最重要的参数之一，用于定义单个共享内存段的最大值。调整该参数的大小，以便在一个共享内存段下容纳下整个InnoDB缓冲池，因为多个共享内存段会导致性能下降
      vm.swappiness = 0  // 当内存不足时，会对性能产生比较大的影响，设置为0，告诉linux系统，除非虚拟内存完全满了，否者不要使用交换分区
    增加资源限制(/etc/security/limit.conf)  // linux pam，即插入式认证模块的配置文件
      打开文件数的限制
        * soft nofile 65535  // *，对所有用户有效，soft，当前系统生效的设置，nofile，限制打开文件的最大数目。在linux中，一张表通常对应2～3个文件
        * hard nofile 65535  // 表明系统中所能设置的最大值
    磁盘调度策略(/sys/block/devname/queue/scheduler)
      查看调度策略
        cat /sys/block/sda/queue/scheduler
        noop anticipatory deadline [cfq]  // 当前策略为cfg，即公平队列策略，用于桌面级的系统。数据库服务器，选用deadline策略
      设置调度策略为deadline
        echo deadline > /sys/block/sda/queue/scheduler
    文件系统
      windows FAT，NTFS，选用NTFS
      linux EXT3，EXT4，XFS，都有日志功能，选用XFS，性能高
      EXT3，EXT4挂载参数(/etc/fstab)
        data = {writeback | ordered | journal}  // 代表不同的日志策略，InnoDB选writeback
        noatime  // 禁止记录文件的访问时间
        nodiratime  // 禁止记录读取目录的时间            
服务器硬件
高并发使得数据库连接数占满  // 可通过更改数据库配置项max_connections改善，默认100
超高cpu使用率使得cpu资源耗尽从而引起宕机 
  cpu密集型应用选用主频更高的cpu，高并发应用选用更多内核的cpu
  对于web应用，内核数量比频率更重要一些，16核，32核，64核...
  注意不要在64位的主机安装32位的操作系统，内存使用率低、寻址能力低...
可用内存大小
  ssd，fusion io
  MyISAM，索引存储在内存中，数据存储在磁盘中
  InnoDB，索引和数据都存储在内存中
  根据主板配置，内存主频越高越好
  内存越大越好，足够的内存，可以将随机io变成顺序io，但内存到达某一定大小后，对性能影响相对有限
  写操作会先内存中执行，多次写操作后，再将数据同步到磁盘，以提升性能
磁盘io性能下降  // 使用更好的磁盘设备，如fusion io，做好磁盘维护，最好不要在主库上进行数据备份
  传统机器硬盘，价格低，存储空间大，读写慢
  使用RAID技术提升传统机器硬盘性能，RAID是磁盘冗余队列的简称，可以把多个容量较小的磁盘组成一个容量更大的磁盘，并提供数据冗余以保证数据完整性
  固态存储，也称为闪存，SSD，PCI-E SDD(fusion io，占用很多内存，比SSD更贵)，更好的随机读写性能，更好的支持并发，但更容易损坏。对于主从结构，如果只有一块SSD，SSD更应该用在从服务器上，因为单线程随机读，更能发挥SSD性能，延迟少，无写操作，使得SSD不容易损坏
  网络存储SAN和NAS，两种外部文件存储设备连接到服务器上的方法，适合顺序io，不适合随机io，性能一般，受制于网络环境和带宽，常用于数据库备份
网卡流量占满  // 1000Mb等于1000/8MB
  减少从服务器数量
  进行分级缓存
  避免使用select *查询
  分离业务网络和服务器网络

基准测试  // 测试软件性能，直接、简单、易于比较，用于评估服务器处理能力。不同于压力测试，压力测试，针对真实的业务进行测试，以获得真实系统所能承受的压力
  性能指标
    QPS  // 每秒处理的查询数，包括增、删、改等其它所有操作
    TPS  // 每秒处理的事务数，实际上是QPS的子集，即，增、删、改
    响应时间  // 完成一个测试任务花费的整体时间
    并发量  // 同时处理的查询请求数，不同于连接数，一般小于连接数
    cpu使用率
    io
    网络流量
  测试工具
    mysqlslap  // >= 5.1版本自带，只能用来测试mysql
    sysbench  // 一个压力测试工具，第三方安装，用它来测试cpu、mem、disk、thread、mysql、postgre、oracle
      对cpu性能进行测试 
      sysbench --test=cpu --cpu-max-prime=10000  
      测试文件io性能
      sysbench --test=fileio --file-total-size=1G prepare  // 生成测试文件
      sysbench --test=fileio --num-threads=8 --init-rng=on --file-total-size=1G --file-test-mode=rndrw --report-interval=1 run

高可用架构
  mysql复制功能
  二进制日志
    查看二进制日志  // binlog命令行工具
    二进制日志格式
        binlog_format = STATEMENT  // SBR，记录的是sql
        binlog_format = ROW  // RBR，记录的是对每行数据的更改，推荐
        binlog_format = MIXED  // 混合使用STATEMENT和ROW，系统决定，推荐
    复制策略
      基于日志点复制  // 成熟，故障转移困难
      基于GTID复制  // global tansaction id，全局唯一，基于事务id进行同步，>= 5.6版本支持，对sql的使用有限制，故障转移方便，推荐
    复制性能优化
      控制主库大事务，分割大事务
      使用MIXED日志格式或set binlog_row_image = minimal
      使用多线程复制，>= 5.6
  单点故障  // 唯一的组件发生故障，导致整个系统瘫痪
    利用SUN共享存储或DRDB磁盘复制
    pxc集群
    ndb集群
  主从复制(读写分离)
    复制管理组件  // 用于主从切换，故障转移
      MMM  // 只支持基于日志点的复制，主从切换时，容易造成数据丢失，没有读负载均衡功能，MMM监控服务存在单点故障
      MHA  // 30s内完成切换，支持GTID复制，数据一致性有保障，只会对主数据库进行监控
  读写分离
    由程序实现读写分离  // 增加开发工作量，程序代码变复杂，
    由中间件实现读写分离
      mysql-proxy  // 性能和稳定性不好，支持读写分离和读负载均衡
      MaxScale  // 性能不错，支持读写分离和读负载均衡，推荐
  读负载均衡
    由程序实现读负载均衡
    由中间件实现读负载均衡
      LVS
      Haproxy
      MaxScale
      F5  // 硬件

分库分表
  几种方式
    把一个节点中的多个数据库，每个数据库分到不同节点中  
    把一个库中的某张表分离到不同的数据库中  // 难度很大，一般不要使用，先尝试其他的优化方案
  分区键的选择
    尽量避免跨分片查询
    尽量使各个分片中数据量平均
  分配数据策略
    按分区键的hash值取模
    按分区键的范围
    利用分区键和分片的映射表来分配  
  对于无需分区的表
    每个分片中存储一份相同的数据  // 数据冗余，但性能好
    使用额外的节点统一存储
  如何在节点上部署分片
    在多个节点上，每个分片使用单一数据库，并且数据库名相同
    在一个节点上部署多个数据库，每个数据库包含一个分片
    将多个分片存储到一个数据库，并在表名上加入分片号后缀
  如何生成全局唯一id
    使用auto_increment_increment和auto_increment_offset参数
    使用全局节点生成唯一id
    在redis等缓存服务器中创建全局唯一id
  分片工具
    oneProxyp  // 一个中间件，代理层，由它决定向哪个节点写入

数据库监控
  对什么进行监控
    对数据库可用性进行监控  
      确认是否可通过网络连接
        mysql-admin -u username -p -h ping
        telnet ip db_port
        在应用程序中测试连接  // 推荐
      确认是否可读写
        检查read_only参数
        建立监控表并对表中的数据进行更新
        执行简单的查询，如select @@version
      监控数据库连接数
        show variables like 'max_connections';
        show global status like 'Threads_connected';  
        Threads_connected / max_connections > 0.8报警
    对数据库性能进行监控
      QPS
      TPS
      监控并发请求数量
        show gloabl status like 'Threads_running';
      监控innodb阻塞
        查询information_schema.innodb_lock_waits等表  
    对主从复制进行监控
      对链路状态监控
        show slave status
          Slave_IO_Running: Yes
          Slave_SQL_Running: Yes
      监控主从复制延迟
        show slave status
          Seconds_Behind_Master: 0  
      主从服务器数据一致性监控
        工具
          pt-table-checksum      
    对服务器资源进行监控
  监控工具
    nagios
    zabbix